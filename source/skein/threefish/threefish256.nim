import threefish
include util

# Constants for Threefish 256 implementation
const
  CipherSize = 256
  CipherQWords = CipherSize div 64
  ExpandedKeySize = CipherQWords + 1

type
  Threefish256Obj = object of CipherInternal
    expandedTweak: array[ExpandedTweakSize, uint64]
    expandedKey: array[ExpandedKeySize, uint64]
    tmpData1, tmpData2: array[CipherQWords, uint64]
  Threefish256* = ref Threefish256Obj

proc getTempData*(c: Cipher): tuple[a, b: seq[uint64]] =
  var tf = Threefish256(c)
  result = (@(tf.tmpData1), @(tf.tmpData2))

proc setTweak*(c: Cipher, tweak: openarray[uint64]) =
  var tf = Threefish256(c)
  setTweak(tweak, tf.expandedTweak)

proc setKey(c: Cipher, key: openarray[uint64]) =
  var tf = Threefish256(c)
  setKey(key, tf.expandedKey)

proc encrypt(c: Cipher, input: openarray[uint64],
  output: var openarray[uint64]) {.noSideEffect.} =
  var tf = Threefish256(c)
  var
    b0 = input[0]
    b1 = input[1]
    b2 = input[2]
    b3 = input[3]

    k0 = tf.expandedKey[0]
    k1 = tf.expandedKey[1]
    k2 = tf.expandedKey[2]
    k3 = tf.expandedKey[3]
    k4 = tf.expandedKey[4]

    t0 = tf.expandedTweak[0]
    t1 = tf.expandedTweak[1]
    t2 = tf.expandedTweak[2]

  b1 += k1 + t0
  b0 += b1 + k0
  b1 = ((b1 shl 14) or (b1 shr (64 - 14))) xor b0
  b3 += k3
  b2 += b3 + k2 + t1
  b3 = ((b3 shl 16) or (b3 shr (64 - 16))) xor b2
  b0 += b3
  b3 = ((b3 shl 52) or (b3 shr (64 - 52))) xor b0
  b2 += b1
  b1 = ((b1 shl 57) or (b1 shr (64 - 57))) xor b2
  b0 += b1
  b1 = ((b1 shl 23) or (b1 shr (64 - 23))) xor b0
  b2 += b3
  b3 = ((b3 shl 40) or (b3 shr (64 - 40))) xor b2
  b0 += b3
  b3 = ((b3 shl 5) or (b3 shr (64 - 5))) xor b0
  b2 += b1
  b1 = ((b1 shl 37) or (b1 shr (64 - 37))) xor b2
  b1 += k2 + t1
  b0 += b1 + k1
  b1 = ((b1 shl 25) or (b1 shr (64 - 25))) xor b0
  b3 += k4 + 1
  b2 += b3 + k3 + t2
  b3 = ((b3 shl 33) or (b3 shr (64 - 33))) xor b2
  b0 += b3
  b3 = ((b3 shl 46) or (b3 shr (64 - 46))) xor b0
  b2 += b1
  b1 = ((b1 shl 12) or (b1 shr (64 - 12))) xor b2
  b0 += b1
  b1 = ((b1 shl 58) or (b1 shr (64 - 58))) xor b0
  b2 += b3
  b3 = ((b3 shl 22) or (b3 shr (64 - 22))) xor b2
  b0 += b3
  b3 = ((b3 shl 32) or (b3 shr (64 - 32))) xor b0
  b2 += b1
  b1 = ((b1 shl 32) or (b1 shr (64 - 32))) xor b2
  b1 += k3 + t2
  b0 += b1 + k2
  b1 = ((b1 shl 14) or (b1 shr (64 - 14))) xor b0
  b3 += k0 + 2
  b2 += b3 + k4 + t0
  b3 = ((b3 shl 16) or (b3 shr (64 - 16))) xor b2
  b0 += b3
  b3 = ((b3 shl 52) or (b3 shr (64 - 52))) xor b0
  b2 += b1
  b1 = ((b1 shl 57) or (b1 shr (64 - 57))) xor b2
  b0 += b1
  b1 = ((b1 shl 23) or (b1 shr (64 - 23))) xor b0
  b2 += b3
  b3 = ((b3 shl 40) or (b3 shr (64 - 40))) xor b2
  b0 += b3
  b3 = ((b3 shl 5) or (b3 shr (64 - 5))) xor b0
  b2 += b1
  b1 = ((b1 shl 37) or (b1 shr (64 - 37))) xor b2
  b1 += k4 + t0
  b0 += b1 + k3
  b1 = ((b1 shl 25) or (b1 shr (64 - 25))) xor b0
  b3 += k1 + 3
  b2 += b3 + k0 + t1
  b3 = ((b3 shl 33) or (b3 shr (64 - 33))) xor b2
  b0 += b3
  b3 = ((b3 shl 46) or (b3 shr (64 - 46))) xor b0
  b2 += b1
  b1 = ((b1 shl 12) or (b1 shr (64 - 12))) xor b2
  b0 += b1
  b1 = ((b1 shl 58) or (b1 shr (64 - 58))) xor b0
  b2 += b3
  b3 = ((b3 shl 22) or (b3 shr (64 - 22))) xor b2
  b0 += b3
  b3 = ((b3 shl 32) or (b3 shr (64 - 32))) xor b0
  b2 += b1
  b1 = ((b1 shl 32) or (b1 shr (64 - 32))) xor b2
  b1 += k0 + t1
  b0 += b1 + k4
  b1 = ((b1 shl 14) or (b1 shr (64 - 14))) xor b0
  b3 += k2 + 4
  b2 += b3 + k1 + t2
  b3 = ((b3 shl 16) or (b3 shr (64 - 16))) xor b2
  b0 += b3
  b3 = ((b3 shl 52) or (b3 shr (64 - 52))) xor b0
  b2 += b1
  b1 = ((b1 shl 57) or (b1 shr (64 - 57))) xor b2
  b0 += b1
  b1 = ((b1 shl 23) or (b1 shr (64 - 23))) xor b0
  b2 += b3
  b3 = ((b3 shl 40) or (b3 shr (64 - 40))) xor b2
  b0 += b3
  b3 = ((b3 shl 5) or (b3 shr (64 - 5))) xor b0
  b2 += b1
  b1 = ((b1 shl 37) or (b1 shr (64 - 37))) xor b2
  b1 += k1 + t2
  b0 += b1 + k0
  b1 = ((b1 shl 25) or (b1 shr (64 - 25))) xor b0
  b3 += k3 + 5
  b2 += b3 + k2 + t0
  b3 = ((b3 shl 33) or (b3 shr (64 - 33))) xor b2
  b0 += b3
  b3 = ((b3 shl 46) or (b3 shr (64 - 46))) xor b0
  b2 += b1
  b1 = ((b1 shl 12) or (b1 shr (64 - 12))) xor b2
  b0 += b1
  b1 = ((b1 shl 58) or (b1 shr (64 - 58))) xor b0
  b2 += b3
  b3 = ((b3 shl 22) or (b3 shr (64 - 22))) xor b2
  b0 += b3
  b3 = ((b3 shl 32) or (b3 shr (64 - 32))) xor b0
  b2 += b1
  b1 = ((b1 shl 32) or (b1 shr (64 - 32))) xor b2
  b1 += k2 + t0
  b0 += b1 + k1
  b1 = ((b1 shl 14) or (b1 shr (64 - 14))) xor b0
  b3 += k4 + 6
  b2 += b3 + k3 + t1
  b3 = ((b3 shl 16) or (b3 shr (64 - 16))) xor b2
  b0 += b3
  b3 = ((b3 shl 52) or (b3 shr (64 - 52))) xor b0
  b2 += b1
  b1 = ((b1 shl 57) or (b1 shr (64 - 57))) xor b2
  b0 += b1
  b1 = ((b1 shl 23) or (b1 shr (64 - 23))) xor b0
  b2 += b3
  b3 = ((b3 shl 40) or (b3 shr (64 - 40))) xor b2
  b0 += b3
  b3 = ((b3 shl 5) or (b3 shr (64 - 5))) xor b0
  b2 += b1
  b1 = ((b1 shl 37) or (b1 shr (64 - 37))) xor b2
  b1 += k3 + t1
  b0 += b1 + k2
  b1 = ((b1 shl 25) or (b1 shr (64 - 25))) xor b0
  b3 += k0 + 7
  b2 += b3 + k4 + t2
  b3 = ((b3 shl 33) or (b3 shr (64 - 33))) xor b2
  b0 += b3
  b3 = ((b3 shl 46) or (b3 shr (64 - 46))) xor b0
  b2 += b1
  b1 = ((b1 shl 12) or (b1 shr (64 - 12))) xor b2
  b0 += b1
  b1 = ((b1 shl 58) or (b1 shr (64 - 58))) xor b0
  b2 += b3
  b3 = ((b3 shl 22) or (b3 shr (64 - 22))) xor b2
  b0 += b3
  b3 = ((b3 shl 32) or (b3 shr (64 - 32))) xor b0
  b2 += b1
  b1 = ((b1 shl 32) or (b1 shr (64 - 32))) xor b2
  b1 += k4 + t2
  b0 += b1 + k3
  b1 = ((b1 shl 14) or (b1 shr (64 - 14))) xor b0
  b3 += k1 + 8
  b2 += b3 + k0 + t0
  b3 = ((b3 shl 16) or (b3 shr (64 - 16))) xor b2
  b0 += b3
  b3 = ((b3 shl 52) or (b3 shr (64 - 52))) xor b0
  b2 += b1
  b1 = ((b1 shl 57) or (b1 shr (64 - 57))) xor b2
  b0 += b1
  b1 = ((b1 shl 23) or (b1 shr (64 - 23))) xor b0
  b2 += b3
  b3 = ((b3 shl 40) or (b3 shr (64 - 40))) xor b2
  b0 += b3
  b3 = ((b3 shl 5) or (b3 shr (64 - 5))) xor b0
  b2 += b1
  b1 = ((b1 shl 37) or (b1 shr (64 - 37))) xor b2
  b1 += k0 + t0
  b0 += b1 + k4
  b1 = ((b1 shl 25) or (b1 shr (64 - 25))) xor b0
  b3 += k2 + 9
  b2 += b3 + k1 + t1
  b3 = ((b3 shl 33) or (b3 shr (64 - 33))) xor b2
  b0 += b3
  b3 = ((b3 shl 46) or (b3 shr (64 - 46))) xor b0
  b2 += b1
  b1 = ((b1 shl 12) or (b1 shr (64 - 12))) xor b2
  b0 += b1
  b1 = ((b1 shl 58) or (b1 shr (64 - 58))) xor b0
  b2 += b3
  b3 = ((b3 shl 22) or (b3 shr (64 - 22))) xor b2
  b0 += b3
  b3 = ((b3 shl 32) or (b3 shr (64 - 32))) xor b0
  b2 += b1
  b1 = ((b1 shl 32) or (b1 shr (64 - 32))) xor b2
  b1 += k1 + t1
  b0 += b1 + k0
  b1 = ((b1 shl 14) or (b1 shr (64 - 14))) xor b0
  b3 += k3 + 10
  b2 += b3 + k2 + t2
  b3 = ((b3 shl 16) or (b3 shr (64 - 16))) xor b2
  b0 += b3
  b3 = ((b3 shl 52) or (b3 shr (64 - 52))) xor b0
  b2 += b1
  b1 = ((b1 shl 57) or (b1 shr (64 - 57))) xor b2
  b0 += b1
  b1 = ((b1 shl 23) or (b1 shr (64 - 23))) xor b0
  b2 += b3
  b3 = ((b3 shl 40) or (b3 shr (64 - 40))) xor b2
  b0 += b3
  b3 = ((b3 shl 5) or (b3 shr (64 - 5))) xor b0
  b2 += b1
  b1 = ((b1 shl 37) or (b1 shr (64 - 37))) xor b2
  b1 += k2 + t2
  b0 += b1 + k1
  b1 = ((b1 shl 25) or (b1 shr (64 - 25))) xor b0
  b3 += k4 + 11
  b2 += b3 + k3 + t0
  b3 = ((b3 shl 33) or (b3 shr (64 - 33))) xor b2
  b0 += b3
  b3 = ((b3 shl 46) or (b3 shr (64 - 46))) xor b0
  b2 += b1
  b1 = ((b1 shl 12) or (b1 shr (64 - 12))) xor b2
  b0 += b1
  b1 = ((b1 shl 58) or (b1 shr (64 - 58))) xor b0
  b2 += b3
  b3 = ((b3 shl 22) or (b3 shr (64 - 22))) xor b2
  b0 += b3
  b3 = ((b3 shl 32) or (b3 shr (64 - 32))) xor b0
  b2 += b1
  b1 = ((b1 shl 32) or (b1 shr (64 - 32))) xor b2
  b1 += k3 + t0
  b0 += b1 + k2
  b1 = ((b1 shl 14) or (b1 shr (64 - 14))) xor b0
  b3 += k0 + 12
  b2 += b3 + k4 + t1
  b3 = ((b3 shl 16) or (b3 shr (64 - 16))) xor b2
  b0 += b3
  b3 = ((b3 shl 52) or (b3 shr (64 - 52))) xor b0
  b2 += b1
  b1 = ((b1 shl 57) or (b1 shr (64 - 57))) xor b2
  b0 += b1
  b1 = ((b1 shl 23) or (b1 shr (64 - 23))) xor b0
  b2 += b3
  b3 = ((b3 shl 40) or (b3 shr (64 - 40))) xor b2
  b0 += b3
  b3 = ((b3 shl 5) or (b3 shr (64 - 5))) xor b0
  b2 += b1
  b1 = ((b1 shl 37) or (b1 shr (64 - 37))) xor b2
  b1 += k4 + t1
  b0 += b1 + k3
  b1 = ((b1 shl 25) or (b1 shr (64 - 25))) xor b0
  b3 += k1 + 13
  b2 += b3 + k0 + t2
  b3 = ((b3 shl 33) or (b3 shr (64 - 33))) xor b2
  b0 += b3
  b3 = ((b3 shl 46) or (b3 shr (64 - 46))) xor b0
  b2 += b1
  b1 = ((b1 shl 12) or (b1 shr (64 - 12))) xor b2
  b0 += b1
  b1 = ((b1 shl 58) or (b1 shr (64 - 58))) xor b0
  b2 += b3
  b3 = ((b3 shl 22) or (b3 shr (64 - 22))) xor b2
  b0 += b3
  b3 = ((b3 shl 32) or (b3 shr (64 - 32))) xor b0
  b2 += b1
  b1 = ((b1 shl 32) or (b1 shr (64 - 32))) xor b2
  b1 += k0 + t2
  b0 += b1 + k4
  b1 = ((b1 shl 14) or (b1 shr (64 - 14))) xor b0
  b3 += k2 + 14
  b2 += b3 + k1 + t0
  b3 = ((b3 shl 16) or (b3 shr (64 - 16))) xor b2
  b0 += b3
  b3 = ((b3 shl 52) or (b3 shr (64 - 52))) xor b0
  b2 += b1
  b1 = ((b1 shl 57) or (b1 shr (64 - 57))) xor b2
  b0 += b1
  b1 = ((b1 shl 23) or (b1 shr (64 - 23))) xor b0
  b2 += b3
  b3 = ((b3 shl 40) or (b3 shr (64 - 40))) xor b2
  b0 += b3
  b3 = ((b3 shl 5) or (b3 shr (64 - 5))) xor b0
  b2 += b1
  b1 = ((b1 shl 37) or (b1 shr (64 - 37))) xor b2
  b1 += k1 + t0
  b0 += b1 + k0
  b1 = ((b1 shl 25) or (b1 shr (64 - 25))) xor b0
  b3 += k3 + 15
  b2 += b3 + k2 + t1
  b3 = ((b3 shl 33) or (b3 shr (64 - 33))) xor b2
  b0 += b3
  b3 = ((b3 shl 46) or (b3 shr (64 - 46))) xor b0
  b2 += b1
  b1 = ((b1 shl 12) or (b1 shr (64 - 12))) xor b2
  b0 += b1
  b1 = ((b1 shl 58) or (b1 shr (64 - 58))) xor b0
  b2 += b3
  b3 = ((b3 shl 22) or (b3 shr (64 - 22))) xor b2
  b0 += b3
  b3 = ((b3 shl 32) or (b3 shr (64 - 32))) xor b0
  b2 += b1
  b1 = ((b1 shl 32) or (b1 shr (64 - 32))) xor b2
  b1 += k2 + t1
  b0 += b1 + k1
  b1 = ((b1 shl 14) or (b1 shr (64 - 14))) xor b0
  b3 += k4 + 16
  b2 += b3 + k3 + t2
  b3 = ((b3 shl 16) or (b3 shr (64 - 16))) xor b2
  b0 += b3
  b3 = ((b3 shl 52) or (b3 shr (64 - 52))) xor b0
  b2 += b1
  b1 = ((b1 shl 57) or (b1 shr (64 - 57))) xor b2
  b0 += b1
  b1 = ((b1 shl 23) or (b1 shr (64 - 23))) xor b0
  b2 += b3
  b3 = ((b3 shl 40) or (b3 shr (64 - 40))) xor b2
  b0 += b3
  b3 = ((b3 shl 5) or (b3 shr (64 - 5))) xor b0
  b2 += b1
  b1 = ((b1 shl 37) or (b1 shr (64 - 37))) xor b2
  b1 += k3 + t2
  b0 += b1 + k2
  b1 = ((b1 shl 25) or (b1 shr (64 - 25))) xor b0
  b3 += k0 + 17
  b2 += b3 + k4 + t0
  b3 = ((b3 shl 33) or (b3 shr (64 - 33))) xor b2
  b0 += b3
  b3 = ((b3 shl 46) or (b3 shr (64 - 46))) xor b0
  b2 += b1
  b1 = ((b1 shl 12) or (b1 shr (64 - 12))) xor b2
  b0 += b1
  b1 = ((b1 shl 58) or (b1 shr (64 - 58))) xor b0
  b2 += b3
  b3 = ((b3 shl 22) or (b3 shr (64 - 22))) xor b2
  b0 += b3
  b3 = ((b3 shl 32) or (b3 shr (64 - 32))) xor b0
  b2 += b1
  b1 = ((b1 shl 32) or (b1 shr (64 - 32))) xor b2

  output[0] = b0 + k3
  output[1] = b1 + k4 + t0
  output[2] = b2 + k0 + t1
  output[3] = b3 + k1 + 18

proc decrypt(c: Cipher, input: openarray[uint64], output: var openarray[uint64]) =
  var tf = Threefish256(c)
  var
    b0 = input[0]
    b1 = input[1]
    b2 = input[2]
    b3 = input[3]

    k0 = tf.expandedKey[0]
    k1 = tf.expandedKey[1]
    k2 = tf.expandedKey[2]
    k3 = tf.expandedKey[3]
    k4 = tf.expandedKey[4]

    t0 = tf.expandedTweak[0]
    t1 = tf.expandedTweak[1]
    t2 = tf.expandedTweak[2]

  var tmp: uint64

  b0 -= k3
  b1 -= k4 + t0
  b2 -= k0 + t1
  b3 -= k1 + 18
  tmp = b3 xor b0
  b3 = (tmp shr 32) or (tmp shl (64 - 32))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 32) or (tmp shl (64 - 32))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 58) or (tmp shl (64 - 58))
  b0 -= b1
  tmp = b3 xor b2
  b3 = (tmp shr 22) or (tmp shl (64 - 22))
  b2 -= b3
  tmp = b3 xor b0
  b3 = (tmp shr 46) or (tmp shl (64 - 46))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 12) or (tmp shl (64 - 12))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 25) or (tmp shl (64 - 25))
  b0 -= b1 + k2
  b1 -= k3 + t2
  tmp = b3 xor b2
  b3 = (tmp shr 33) or (tmp shl (64 - 33))
  b2 -= b3 + k4 + t0
  b3 -= k0 + 17
  tmp = b3 xor b0
  b3 = (tmp shr 5) or (tmp shl (64 - 5))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 37) or (tmp shl (64 - 37))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 23) or (tmp shl (64 - 23))
  b0 -= b1
  tmp = b3 xor b2
  b3 = (tmp shr 40) or (tmp shl (64 - 40))
  b2 -= b3
  tmp = b3 xor b0
  b3 = (tmp shr 52) or (tmp shl (64 - 52))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 57) or (tmp shl (64 - 57))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 14) or (tmp shl (64 - 14))
  b0 -= b1 + k1
  b1 -= k2 + t1
  tmp = b3 xor b2
  b3 = (tmp shr 16) or (tmp shl (64 - 16))
  b2 -= b3 + k3 + t2
  b3 -= k4 + 16
  tmp = b3 xor b0
  b3 = (tmp shr 32) or (tmp shl (64 - 32))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 32) or (tmp shl (64 - 32))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 58) or (tmp shl (64 - 58))
  b0 -= b1
  tmp = b3 xor b2
  b3 = (tmp shr 22) or (tmp shl (64 - 22))
  b2 -= b3
  tmp = b3 xor b0
  b3 = (tmp shr 46) or (tmp shl (64 - 46))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 12) or (tmp shl (64 - 12))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 25) or (tmp shl (64 - 25))
  b0 -= b1 + k0
  b1 -= k1 + t0
  tmp = b3 xor b2
  b3 = (tmp shr 33) or (tmp shl (64 - 33))
  b2 -= b3 + k2 + t1
  b3 -= k3 + 15
  tmp = b3 xor b0
  b3 = (tmp shr 5) or (tmp shl (64 - 5))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 37) or (tmp shl (64 - 37))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 23) or (tmp shl (64 - 23))
  b0 -= b1
  tmp = b3 xor b2
  b3 = (tmp shr 40) or (tmp shl (64 - 40))
  b2 -= b3
  tmp = b3 xor b0
  b3 = (tmp shr 52) or (tmp shl (64 - 52))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 57) or (tmp shl (64 - 57))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 14) or (tmp shl (64 - 14))
  b0 -= b1 + k4
  b1 -= k0 + t2
  tmp = b3 xor b2
  b3 = (tmp shr 16) or (tmp shl (64 - 16))
  b2 -= b3 + k1 + t0
  b3 -= k2 + 14
  tmp = b3 xor b0
  b3 = (tmp shr 32) or (tmp shl (64 - 32))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 32) or (tmp shl (64 - 32))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 58) or (tmp shl (64 - 58))
  b0 -= b1
  tmp = b3 xor b2
  b3 = (tmp shr 22) or (tmp shl (64 - 22))
  b2 -= b3
  tmp = b3 xor b0
  b3 = (tmp shr 46) or (tmp shl (64 - 46))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 12) or (tmp shl (64 - 12))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 25) or (tmp shl (64 - 25))
  b0 -= b1 + k3
  b1 -= k4 + t1
  tmp = b3 xor b2
  b3 = (tmp shr 33) or (tmp shl (64 - 33))
  b2 -= b3 + k0 + t2
  b3 -= k1 + 13
  tmp = b3 xor b0
  b3 = (tmp shr 5) or (tmp shl (64 - 5))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 37) or (tmp shl (64 - 37))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 23) or (tmp shl (64 - 23))
  b0 -= b1
  tmp = b3 xor b2
  b3 = (tmp shr 40) or (tmp shl (64 - 40))
  b2 -= b3
  tmp = b3 xor b0
  b3 = (tmp shr 52) or (tmp shl (64 - 52))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 57) or (tmp shl (64 - 57))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 14) or (tmp shl (64 - 14))
  b0 -= b1 + k2
  b1 -= k3 + t0
  tmp = b3 xor b2
  b3 = (tmp shr 16) or (tmp shl (64 - 16))
  b2 -= b3 + k4 + t1
  b3 -= k0 + 12
  tmp = b3 xor b0
  b3 = (tmp shr 32) or (tmp shl (64 - 32))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 32) or (tmp shl (64 - 32))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 58) or (tmp shl (64 - 58))
  b0 -= b1
  tmp = b3 xor b2
  b3 = (tmp shr 22) or (tmp shl (64 - 22))
  b2 -= b3
  tmp = b3 xor b0
  b3 = (tmp shr 46) or (tmp shl (64 - 46))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 12) or (tmp shl (64 - 12))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 25) or (tmp shl (64 - 25))
  b0 -= b1 + k1
  b1 -= k2 + t2
  tmp = b3 xor b2
  b3 = (tmp shr 33) or (tmp shl (64 - 33))
  b2 -= b3 + k3 + t0
  b3 -= k4 + 11
  tmp = b3 xor b0
  b3 = (tmp shr 5) or (tmp shl (64 - 5))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 37) or (tmp shl (64 - 37))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 23) or (tmp shl (64 - 23))
  b0 -= b1
  tmp = b3 xor b2
  b3 = (tmp shr 40) or (tmp shl (64 - 40))
  b2 -= b3
  tmp = b3 xor b0
  b3 = (tmp shr 52) or (tmp shl (64 - 52))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 57) or (tmp shl (64 - 57))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 14) or (tmp shl (64 - 14))
  b0 -= b1 + k0
  b1 -= k1 + t1
  tmp = b3 xor b2
  b3 = (tmp shr 16) or (tmp shl (64 - 16))
  b2 -= b3 + k2 + t2
  b3 -= k3 + 10
  tmp = b3 xor b0
  b3 = (tmp shr 32) or (tmp shl (64 - 32))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 32) or (tmp shl (64 - 32))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 58) or (tmp shl (64 - 58))
  b0 -= b1
  tmp = b3 xor b2
  b3 = (tmp shr 22) or (tmp shl (64 - 22))
  b2 -= b3
  tmp = b3 xor b0
  b3 = (tmp shr 46) or (tmp shl (64 - 46))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 12) or (tmp shl (64 - 12))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 25) or (tmp shl (64 - 25))
  b0 -= b1 + k4
  b1 -= k0 + t0
  tmp = b3 xor b2
  b3 = (tmp shr 33) or (tmp shl (64 - 33))
  b2 -= b3 + k1 + t1
  b3 -= k2 + 9
  tmp = b3 xor b0
  b3 = (tmp shr 5) or (tmp shl (64 - 5))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 37) or (tmp shl (64 - 37))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 23) or (tmp shl (64 - 23))
  b0 -= b1
  tmp = b3 xor b2
  b3 = (tmp shr 40) or (tmp shl (64 - 40))
  b2 -= b3
  tmp = b3 xor b0
  b3 = (tmp shr 52) or (tmp shl (64 - 52))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 57) or (tmp shl (64 - 57))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 14) or (tmp shl (64 - 14))
  b0 -= b1 + k3
  b1 -= k4 + t2
  tmp = b3 xor b2
  b3 = (tmp shr 16) or (tmp shl (64 - 16))
  b2 -= b3 + k0 + t0
  b3 -= k1 + 8
  tmp = b3 xor b0
  b3 = (tmp shr 32) or (tmp shl (64 - 32))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 32) or (tmp shl (64 - 32))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 58) or (tmp shl (64 - 58))
  b0 -= b1
  tmp = b3 xor b2
  b3 = (tmp shr 22) or (tmp shl (64 - 22))
  b2 -= b3
  tmp = b3 xor b0
  b3 = (tmp shr 46) or (tmp shl (64 - 46))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 12) or (tmp shl (64 - 12))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 25) or (tmp shl (64 - 25))
  b0 -= b1 + k2
  b1 -= k3 + t1
  tmp = b3 xor b2
  b3 = (tmp shr 33) or (tmp shl (64 - 33))
  b2 -= b3 + k4 + t2
  b3 -= k0 + 7
  tmp = b3 xor b0
  b3 = (tmp shr 5) or (tmp shl (64 - 5))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 37) or (tmp shl (64 - 37))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 23) or (tmp shl (64 - 23))
  b0 -= b1
  tmp = b3 xor b2
  b3 = (tmp shr 40) or (tmp shl (64 - 40))
  b2 -= b3
  tmp = b3 xor b0
  b3 = (tmp shr 52) or (tmp shl (64 - 52))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 57) or (tmp shl (64 - 57))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 14) or (tmp shl (64 - 14))
  b0 -= b1 + k1
  b1 -= k2 + t0
  tmp = b3 xor b2
  b3 = (tmp shr 16) or (tmp shl (64 - 16))
  b2 -= b3 + k3 + t1
  b3 -= k4 + 6
  tmp = b3 xor b0
  b3 = (tmp shr 32) or (tmp shl (64 - 32))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 32) or (tmp shl (64 - 32))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 58) or (tmp shl (64 - 58))
  b0 -= b1
  tmp = b3 xor b2
  b3 = (tmp shr 22) or (tmp shl (64 - 22))
  b2 -= b3
  tmp = b3 xor b0
  b3 = (tmp shr 46) or (tmp shl (64 - 46))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 12) or (tmp shl (64 - 12))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 25) or (tmp shl (64 - 25))
  b0 -= b1 + k0
  b1 -= k1 + t2
  tmp = b3 xor b2
  b3 = (tmp shr 33) or (tmp shl (64 - 33))
  b2 -= b3 + k2 + t0
  b3 -= k3 + 5
  tmp = b3 xor b0
  b3 = (tmp shr 5) or (tmp shl (64 - 5))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 37) or (tmp shl (64 - 37))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 23) or (tmp shl (64 - 23))
  b0 -= b1
  tmp = b3 xor b2
  b3 = (tmp shr 40) or (tmp shl (64 - 40))
  b2 -= b3
  tmp = b3 xor b0
  b3 = (tmp shr 52) or (tmp shl (64 - 52))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 57) or (tmp shl (64 - 57))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 14) or (tmp shl (64 - 14))
  b0 -= b1 + k4
  b1 -= k0 + t1
  tmp = b3 xor b2
  b3 = (tmp shr 16) or (tmp shl (64 - 16))
  b2 -= b3 + k1 + t2
  b3 -= k2 + 4
  tmp = b3 xor b0
  b3 = (tmp shr 32) or (tmp shl (64 - 32))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 32) or (tmp shl (64 - 32))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 58) or (tmp shl (64 - 58))
  b0 -= b1
  tmp = b3 xor b2
  b3 = (tmp shr 22) or (tmp shl (64 - 22))
  b2 -= b3
  tmp = b3 xor b0
  b3 = (tmp shr 46) or (tmp shl (64 - 46))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 12) or (tmp shl (64 - 12))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 25) or (tmp shl (64 - 25))
  b0 -= b1 + k3
  b1 -= k4 + t0
  tmp = b3 xor b2
  b3 = (tmp shr 33) or (tmp shl (64 - 33))
  b2 -= b3 + k0 + t1
  b3 -= k1 + 3
  tmp = b3 xor b0
  b3 = (tmp shr 5) or (tmp shl (64 - 5))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 37) or (tmp shl (64 - 37))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 23) or (tmp shl (64 - 23))
  b0 -= b1
  tmp = b3 xor b2
  b3 = (tmp shr 40) or (tmp shl (64 - 40))
  b2 -= b3
  tmp = b3 xor b0
  b3 = (tmp shr 52) or (tmp shl (64 - 52))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 57) or (tmp shl (64 - 57))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 14) or (tmp shl (64 - 14))
  b0 -= b1 + k2
  b1 -= k3 + t2
  tmp = b3 xor b2
  b3 = (tmp shr 16) or (tmp shl (64 - 16))
  b2 -= b3 + k4 + t0
  b3 -= k0 + 2
  tmp = b3 xor b0
  b3 = (tmp shr 32) or (tmp shl (64 - 32))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 32) or (tmp shl (64 - 32))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 58) or (tmp shl (64 - 58))
  b0 -= b1
  tmp = b3 xor b2
  b3 = (tmp shr 22) or (tmp shl (64 - 22))
  b2 -= b3
  tmp = b3 xor b0
  b3 = (tmp shr 46) or (tmp shl (64 - 46))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 12) or (tmp shl (64 - 12))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 25) or (tmp shl (64 - 25))
  b0 -= b1 + k1
  b1 -= k2 + t1
  tmp = b3 xor b2
  b3 = (tmp shr 33) or (tmp shl (64 - 33))
  b2 -= b3 + k3 + t2
  b3 -= k4 + 1
  tmp = b3 xor b0
  b3 = (tmp shr 5) or (tmp shl (64 - 5))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 37) or (tmp shl (64 - 37))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 23) or (tmp shl (64 - 23))
  b0 -= b1
  tmp = b3 xor b2
  b3 = (tmp shr 40) or (tmp shl (64 - 40))
  b2 -= b3
  tmp = b3 xor b0
  b3 = (tmp shr 52) or (tmp shl (64 - 52))
  b0 -= b3
  tmp = b1 xor b2
  b1 = (tmp shr 57) or (tmp shl (64 - 57))
  b2 -= b1
  tmp = b1 xor b0
  b1 = (tmp shr 14) or (tmp shl (64 - 14))
  b0 -= b1 + k0
  b1 -= k1 + t0
  tmp = b3 xor b2
  b3 = (tmp shr 16) or (tmp shl (64 - 16))
  b2 -= b3 + k2 + t1
  b3 -= k3

  output[0] = b0
  output[1] = b1
  output[2] = b2
  output[3] = b3

proc newThreefish256*(key: openarray[byte], tweak: openarray[uint64]): Threefish256 =
  new(result)

  # initialize tweak
  setTweak(tweak, result.expandedTweak)

  result.expandedKey[ExpandedKeySize-1] = KeyScheduleConst

  # convert key bytes to required uint64 array
  if key.len > 0:
    var tmpkey: array[ExpandedKeySize, uint64]
    for i in 0..<ExpandedKeySize-1:
      tmpkey[i] = uint64le(key, i*8)
    setKey(tmpkey, result.expandedKey)

  result.encryptImpl = encrypt
  result.decryptImpl = decrypt
  result.getTempDataImpl = getTempData
  result.setTweakImpl = threefish256.setTweak
  result.setKeyImpl = setKey
  result.stateSize = 256

proc newThreefish256*(key, tweak: openarray[uint64]): Threefish256 =
  new(result)

  # initialize tweak
  setTweak(tweak, result.expandedKey)

  result.expandedKey[ExpandedKeySize-1] = KeyScheduleConst

  setKey(key, result.expandedKey)

  result.encryptImpl = encrypt
  result.decryptImpl = decrypt
  result.getTempDataImpl = getTempData
  result.setTweakImpl = threefish256.setTweak
  result.setKeyImpl = setKey
  result.stateSize = 256

