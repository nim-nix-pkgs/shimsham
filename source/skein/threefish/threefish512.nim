import threefish
include util

const
  CipherSize = 512
  CipherQWords = CipherSize div 64
  ExpandedKeySize = CipherQWords + 1

type
  Threefish512Obj* = object of CipherInternal
    expandedTweak: array[ExpandedTweakSize, uint64]
    expandedKey: array[ExpandedKeySize, uint64]
    tmpData1, tmpData2: array[CipherQWords, uint64]
  Threefish512* = ref Threefish512Obj

proc getTempData*(c: Cipher): tuple[a, b: seq[uint64]] =
  var tf = Threefish512(c)
  result = (@(tf.tmpData1), @(tf.tmpData2))

proc setTweak*(c: Cipher, tweak: openarray[uint64]) =
  var tf = Threefish512(c)
  setTweak(tweak, tf.expandedTweak)

proc setKey(c: Cipher, key: openarray[uint64]) =
  var tf = Threefish512(c)
  setKey(key, tf.expandedKey)

proc encrypt(c: Cipher, input: openarray[uint64],
  output: var openarray[uint64]) {.noSideEffect.} =
  var tf = Threefish512(c)
  var
    b0 = input[0]
    b1 = input[1]
    b2 = input[2]
    b3 = input[3]
    b4 = input[4]
    b5 = input[5]
    b6 = input[6]
    b7 = input[7]

    k0 = tf.expandedKey[0]
    k1 = tf.expandedKey[1]
    k2 = tf.expandedKey[2]
    k3 = tf.expandedKey[3]
    k4 = tf.expandedKey[4]
    k5 = tf.expandedKey[5]
    k6 = tf.expandedKey[6]
    k7 = tf.expandedKey[7]
    k8 = tf.expandedKey[8]

    t0 = tf.expandedTweak[0]
    t1 = tf.expandedTweak[1]
    t2 = tf.expandedTweak[2]

  b1 += k1
  b0 += b1 + k0
  b1 = ((b1 shl 46) or (b1 shr (64 - 46))) xor b0
  b3 += k3
  b2 += b3 + k2
  b3 = ((b3 shl 36) or (b3 shr (64 - 36))) xor b2
  b5 += k5 + t0
  b4 += b5 + k4
  b5 = ((b5 shl 19) or (b5 shr (64 - 19))) xor b4
  b7 += k7
  b6 += b7 + k6 + t1
  b7 = ((b7 shl 37) or (b7 shr (64 - 37))) xor b6
  b2 += b1
  b1 = ((b1 shl 33) or (b1 shr (64 - 33))) xor b2
  b4 += b7
  b7 = ((b7 shl 27) or (b7 shr (64 - 27))) xor b4
  b6 += b5
  b5 = ((b5 shl 14) or (b5 shr (64 - 14))) xor b6
  b0 += b3
  b3 = ((b3 shl 42) or (b3 shr (64 - 42))) xor b0
  b4 += b1
  b1 = ((b1 shl 17) or (b1 shr (64 - 17))) xor b4
  b6 += b3
  b3 = ((b3 shl 49) or (b3 shr (64 - 49))) xor b6
  b0 += b5
  b5 = ((b5 shl 36) or (b5 shr (64 - 36))) xor b0
  b2 += b7
  b7 = ((b7 shl 39) or (b7 shr (64 - 39))) xor b2
  b6 += b1
  b1 = ((b1 shl 44) or (b1 shr (64 - 44))) xor b6
  b0 += b7
  b7 = ((b7 shl 9) or (b7 shr (64 - 9))) xor b0
  b2 += b5
  b5 = ((b5 shl 54) or (b5 shr (64 - 54))) xor b2
  b4 += b3
  b3 = ((b3 shl 56) or (b3 shr (64 - 56))) xor b4
  b1 += k2
  b0 += b1 + k1
  b1 = ((b1 shl 39) or (b1 shr (64 - 39))) xor b0
  b3 += k4
  b2 += b3 + k3
  b3 = ((b3 shl 30) or (b3 shr (64 - 30))) xor b2
  b5 += k6 + t1
  b4 += b5 + k5
  b5 = ((b5 shl 34) or (b5 shr (64 - 34))) xor b4
  b7 += k8 + 1
  b6 += b7 + k7 + t2
  b7 = ((b7 shl 24) or (b7 shr (64 - 24))) xor b6
  b2 += b1
  b1 = ((b1 shl 13) or (b1 shr (64 - 13))) xor b2
  b4 += b7
  b7 = ((b7 shl 50) or (b7 shr (64 - 50))) xor b4
  b6 += b5
  b5 = ((b5 shl 10) or (b5 shr (64 - 10))) xor b6
  b0 += b3
  b3 = ((b3 shl 17) or (b3 shr (64 - 17))) xor b0
  b4 += b1
  b1 = ((b1 shl 25) or (b1 shr (64 - 25))) xor b4
  b6 += b3
  b3 = ((b3 shl 29) or (b3 shr (64 - 29))) xor b6
  b0 += b5
  b5 = ((b5 shl 39) or (b5 shr (64 - 39))) xor b0
  b2 += b7
  b7 = ((b7 shl 43) or (b7 shr (64 - 43))) xor b2
  b6 += b1
  b1 = ((b1 shl 8) or (b1 shr (64 - 8))) xor b6
  b0 += b7
  b7 = ((b7 shl 35) or (b7 shr (64 - 35))) xor b0
  b2 += b5
  b5 = ((b5 shl 56) or (b5 shr (64 - 56))) xor b2
  b4 += b3
  b3 = ((b3 shl 22) or (b3 shr (64 - 22))) xor b4
  b1 += k3
  b0 += b1 + k2
  b1 = ((b1 shl 46) or (b1 shr (64 - 46))) xor b0
  b3 += k5
  b2 += b3 + k4
  b3 = ((b3 shl 36) or (b3 shr (64 - 36))) xor b2
  b5 += k7 + t2
  b4 += b5 + k6
  b5 = ((b5 shl 19) or (b5 shr (64 - 19))) xor b4
  b7 += k0 + 2
  b6 += b7 + k8 + t0
  b7 = ((b7 shl 37) or (b7 shr (64 - 37))) xor b6
  b2 += b1
  b1 = ((b1 shl 33) or (b1 shr (64 - 33))) xor b2
  b4 += b7
  b7 = ((b7 shl 27) or (b7 shr (64 - 27))) xor b4
  b6 += b5
  b5 = ((b5 shl 14) or (b5 shr (64 - 14))) xor b6
  b0 += b3
  b3 = ((b3 shl 42) or (b3 shr (64 - 42))) xor b0
  b4 += b1
  b1 = ((b1 shl 17) or (b1 shr (64 - 17))) xor b4
  b6 += b3
  b3 = ((b3 shl 49) or (b3 shr (64 - 49))) xor b6
  b0 += b5
  b5 = ((b5 shl 36) or (b5 shr (64 - 36))) xor b0
  b2 += b7
  b7 = ((b7 shl 39) or (b7 shr (64 - 39))) xor b2
  b6 += b1
  b1 = ((b1 shl 44) or (b1 shr (64 - 44))) xor b6
  b0 += b7
  b7 = ((b7 shl 9) or (b7 shr (64 - 9))) xor b0
  b2 += b5
  b5 = ((b5 shl 54) or (b5 shr (64 - 54))) xor b2
  b4 += b3
  b3 = ((b3 shl 56) or (b3 shr (64 - 56))) xor b4
  b1 += k4
  b0 += b1 + k3
  b1 = ((b1 shl 39) or (b1 shr (64 - 39))) xor b0
  b3 += k6
  b2 += b3 + k5
  b3 = ((b3 shl 30) or (b3 shr (64 - 30))) xor b2
  b5 += k8 + t0
  b4 += b5 + k7
  b5 = ((b5 shl 34) or (b5 shr (64 - 34))) xor b4
  b7 += k1 + 3
  b6 += b7 + k0 + t1
  b7 = ((b7 shl 24) or (b7 shr (64 - 24))) xor b6
  b2 += b1
  b1 = ((b1 shl 13) or (b1 shr (64 - 13))) xor b2
  b4 += b7
  b7 = ((b7 shl 50) or (b7 shr (64 - 50))) xor b4
  b6 += b5
  b5 = ((b5 shl 10) or (b5 shr (64 - 10))) xor b6
  b0 += b3
  b3 = ((b3 shl 17) or (b3 shr (64 - 17))) xor b0
  b4 += b1
  b1 = ((b1 shl 25) or (b1 shr (64 - 25))) xor b4
  b6 += b3
  b3 = ((b3 shl 29) or (b3 shr (64 - 29))) xor b6
  b0 += b5
  b5 = ((b5 shl 39) or (b5 shr (64 - 39))) xor b0
  b2 += b7
  b7 = ((b7 shl 43) or (b7 shr (64 - 43))) xor b2
  b6 += b1
  b1 = ((b1 shl 8) or (b1 shr (64 - 8))) xor b6
  b0 += b7
  b7 = ((b7 shl 35) or (b7 shr (64 - 35))) xor b0
  b2 += b5
  b5 = ((b5 shl 56) or (b5 shr (64 - 56))) xor b2
  b4 += b3
  b3 = ((b3 shl 22) or (b3 shr (64 - 22))) xor b4
  b1 += k5
  b0 += b1 + k4
  b1 = ((b1 shl 46) or (b1 shr (64 - 46))) xor b0
  b3 += k7
  b2 += b3 + k6
  b3 = ((b3 shl 36) or (b3 shr (64 - 36))) xor b2
  b5 += k0 + t1
  b4 += b5 + k8
  b5 = ((b5 shl 19) or (b5 shr (64 - 19))) xor b4
  b7 += k2 + 4
  b6 += b7 + k1 + t2
  b7 = ((b7 shl 37) or (b7 shr (64 - 37))) xor b6
  b2 += b1
  b1 = ((b1 shl 33) or (b1 shr (64 - 33))) xor b2
  b4 += b7
  b7 = ((b7 shl 27) or (b7 shr (64 - 27))) xor b4
  b6 += b5
  b5 = ((b5 shl 14) or (b5 shr (64 - 14))) xor b6
  b0 += b3
  b3 = ((b3 shl 42) or (b3 shr (64 - 42))) xor b0
  b4 += b1
  b1 = ((b1 shl 17) or (b1 shr (64 - 17))) xor b4
  b6 += b3
  b3 = ((b3 shl 49) or (b3 shr (64 - 49))) xor b6
  b0 += b5
  b5 = ((b5 shl 36) or (b5 shr (64 - 36))) xor b0
  b2 += b7
  b7 = ((b7 shl 39) or (b7 shr (64 - 39))) xor b2
  b6 += b1
  b1 = ((b1 shl 44) or (b1 shr (64 - 44))) xor b6
  b0 += b7
  b7 = ((b7 shl 9) or (b7 shr (64 - 9))) xor b0
  b2 += b5
  b5 = ((b5 shl 54) or (b5 shr (64 - 54))) xor b2
  b4 += b3
  b3 = ((b3 shl 56) or (b3 shr (64 - 56))) xor b4
  b1 += k6
  b0 += b1 + k5
  b1 = ((b1 shl 39) or (b1 shr (64 - 39))) xor b0
  b3 += k8
  b2 += b3 + k7
  b3 = ((b3 shl 30) or (b3 shr (64 - 30))) xor b2
  b5 += k1 + t2
  b4 += b5 + k0
  b5 = ((b5 shl 34) or (b5 shr (64 - 34))) xor b4
  b7 += k3 + 5
  b6 += b7 + k2 + t0
  b7 = ((b7 shl 24) or (b7 shr (64 - 24))) xor b6
  b2 += b1
  b1 = ((b1 shl 13) or (b1 shr (64 - 13))) xor b2
  b4 += b7
  b7 = ((b7 shl 50) or (b7 shr (64 - 50))) xor b4
  b6 += b5
  b5 = ((b5 shl 10) or (b5 shr (64 - 10))) xor b6
  b0 += b3
  b3 = ((b3 shl 17) or (b3 shr (64 - 17))) xor b0
  b4 += b1
  b1 = ((b1 shl 25) or (b1 shr (64 - 25))) xor b4
  b6 += b3
  b3 = ((b3 shl 29) or (b3 shr (64 - 29))) xor b6
  b0 += b5
  b5 = ((b5 shl 39) or (b5 shr (64 - 39))) xor b0
  b2 += b7
  b7 = ((b7 shl 43) or (b7 shr (64 - 43))) xor b2
  b6 += b1
  b1 = ((b1 shl 8) or (b1 shr (64 - 8))) xor b6
  b0 += b7
  b7 = ((b7 shl 35) or (b7 shr (64 - 35))) xor b0
  b2 += b5
  b5 = ((b5 shl 56) or (b5 shr (64 - 56))) xor b2
  b4 += b3
  b3 = ((b3 shl 22) or (b3 shr (64 - 22))) xor b4
  b1 += k7
  b0 += b1 + k6
  b1 = ((b1 shl 46) or (b1 shr (64 - 46))) xor b0
  b3 += k0
  b2 += b3 + k8
  b3 = ((b3 shl 36) or (b3 shr (64 - 36))) xor b2
  b5 += k2 + t0
  b4 += b5 + k1
  b5 = ((b5 shl 19) or (b5 shr (64 - 19))) xor b4
  b7 += k4 + 6
  b6 += b7 + k3 + t1
  b7 = ((b7 shl 37) or (b7 shr (64 - 37))) xor b6
  b2 += b1
  b1 = ((b1 shl 33) or (b1 shr (64 - 33))) xor b2
  b4 += b7
  b7 = ((b7 shl 27) or (b7 shr (64 - 27))) xor b4
  b6 += b5
  b5 = ((b5 shl 14) or (b5 shr (64 - 14))) xor b6
  b0 += b3
  b3 = ((b3 shl 42) or (b3 shr (64 - 42))) xor b0
  b4 += b1
  b1 = ((b1 shl 17) or (b1 shr (64 - 17))) xor b4
  b6 += b3
  b3 = ((b3 shl 49) or (b3 shr (64 - 49))) xor b6
  b0 += b5
  b5 = ((b5 shl 36) or (b5 shr (64 - 36))) xor b0
  b2 += b7
  b7 = ((b7 shl 39) or (b7 shr (64 - 39))) xor b2
  b6 += b1
  b1 = ((b1 shl 44) or (b1 shr (64 - 44))) xor b6
  b0 += b7
  b7 = ((b7 shl 9) or (b7 shr (64 - 9))) xor b0
  b2 += b5
  b5 = ((b5 shl 54) or (b5 shr (64 - 54))) xor b2
  b4 += b3
  b3 = ((b3 shl 56) or (b3 shr (64 - 56))) xor b4
  b1 += k8
  b0 += b1 + k7
  b1 = ((b1 shl 39) or (b1 shr (64 - 39))) xor b0
  b3 += k1
  b2 += b3 + k0
  b3 = ((b3 shl 30) or (b3 shr (64 - 30))) xor b2
  b5 += k3 + t1
  b4 += b5 + k2
  b5 = ((b5 shl 34) or (b5 shr (64 - 34))) xor b4
  b7 += k5 + 7
  b6 += b7 + k4 + t2
  b7 = ((b7 shl 24) or (b7 shr (64 - 24))) xor b6
  b2 += b1
  b1 = ((b1 shl 13) or (b1 shr (64 - 13))) xor b2
  b4 += b7
  b7 = ((b7 shl 50) or (b7 shr (64 - 50))) xor b4
  b6 += b5
  b5 = ((b5 shl 10) or (b5 shr (64 - 10))) xor b6
  b0 += b3
  b3 = ((b3 shl 17) or (b3 shr (64 - 17))) xor b0
  b4 += b1
  b1 = ((b1 shl 25) or (b1 shr (64 - 25))) xor b4
  b6 += b3
  b3 = ((b3 shl 29) or (b3 shr (64 - 29))) xor b6
  b0 += b5
  b5 = ((b5 shl 39) or (b5 shr (64 - 39))) xor b0
  b2 += b7
  b7 = ((b7 shl 43) or (b7 shr (64 - 43))) xor b2
  b6 += b1
  b1 = ((b1 shl 8) or (b1 shr (64 - 8))) xor b6
  b0 += b7
  b7 = ((b7 shl 35) or (b7 shr (64 - 35))) xor b0
  b2 += b5
  b5 = ((b5 shl 56) or (b5 shr (64 - 56))) xor b2
  b4 += b3
  b3 = ((b3 shl 22) or (b3 shr (64 - 22))) xor b4
  b1 += k0
  b0 += b1 + k8
  b1 = ((b1 shl 46) or (b1 shr (64 - 46))) xor b0
  b3 += k2
  b2 += b3 + k1
  b3 = ((b3 shl 36) or (b3 shr (64 - 36))) xor b2
  b5 += k4 + t2
  b4 += b5 + k3
  b5 = ((b5 shl 19) or (b5 shr (64 - 19))) xor b4
  b7 += k6 + 8
  b6 += b7 + k5 + t0
  b7 = ((b7 shl 37) or (b7 shr (64 - 37))) xor b6
  b2 += b1
  b1 = ((b1 shl 33) or (b1 shr (64 - 33))) xor b2
  b4 += b7
  b7 = ((b7 shl 27) or (b7 shr (64 - 27))) xor b4
  b6 += b5
  b5 = ((b5 shl 14) or (b5 shr (64 - 14))) xor b6
  b0 += b3
  b3 = ((b3 shl 42) or (b3 shr (64 - 42))) xor b0
  b4 += b1
  b1 = ((b1 shl 17) or (b1 shr (64 - 17))) xor b4
  b6 += b3
  b3 = ((b3 shl 49) or (b3 shr (64 - 49))) xor b6
  b0 += b5
  b5 = ((b5 shl 36) or (b5 shr (64 - 36))) xor b0
  b2 += b7
  b7 = ((b7 shl 39) or (b7 shr (64 - 39))) xor b2
  b6 += b1
  b1 = ((b1 shl 44) or (b1 shr (64 - 44))) xor b6
  b0 += b7
  b7 = ((b7 shl 9) or (b7 shr (64 - 9))) xor b0
  b2 += b5
  b5 = ((b5 shl 54) or (b5 shr (64 - 54))) xor b2
  b4 += b3
  b3 = ((b3 shl 56) or (b3 shr (64 - 56))) xor b4
  b1 += k1
  b0 += b1 + k0
  b1 = ((b1 shl 39) or (b1 shr (64 - 39))) xor b0
  b3 += k3
  b2 += b3 + k2
  b3 = ((b3 shl 30) or (b3 shr (64 - 30))) xor b2
  b5 += k5 + t0
  b4 += b5 + k4
  b5 = ((b5 shl 34) or (b5 shr (64 - 34))) xor b4
  b7 += k7 + 9
  b6 += b7 + k6 + t1
  b7 = ((b7 shl 24) or (b7 shr (64 - 24))) xor b6
  b2 += b1
  b1 = ((b1 shl 13) or (b1 shr (64 - 13))) xor b2
  b4 += b7
  b7 = ((b7 shl 50) or (b7 shr (64 - 50))) xor b4
  b6 += b5
  b5 = ((b5 shl 10) or (b5 shr (64 - 10))) xor b6
  b0 += b3
  b3 = ((b3 shl 17) or (b3 shr (64 - 17))) xor b0
  b4 += b1
  b1 = ((b1 shl 25) or (b1 shr (64 - 25))) xor b4
  b6 += b3
  b3 = ((b3 shl 29) or (b3 shr (64 - 29))) xor b6
  b0 += b5
  b5 = ((b5 shl 39) or (b5 shr (64 - 39))) xor b0
  b2 += b7
  b7 = ((b7 shl 43) or (b7 shr (64 - 43))) xor b2
  b6 += b1
  b1 = ((b1 shl 8) or (b1 shr (64 - 8))) xor b6
  b0 += b7
  b7 = ((b7 shl 35) or (b7 shr (64 - 35))) xor b0
  b2 += b5
  b5 = ((b5 shl 56) or (b5 shr (64 - 56))) xor b2
  b4 += b3
  b3 = ((b3 shl 22) or (b3 shr (64 - 22))) xor b4
  b1 += k2
  b0 += b1 + k1
  b1 = ((b1 shl 46) or (b1 shr (64 - 46))) xor b0
  b3 += k4
  b2 += b3 + k3
  b3 = ((b3 shl 36) or (b3 shr (64 - 36))) xor b2
  b5 += k6 + t1
  b4 += b5 + k5
  b5 = ((b5 shl 19) or (b5 shr (64 - 19))) xor b4
  b7 += k8 + 10
  b6 += b7 + k7 + t2
  b7 = ((b7 shl 37) or (b7 shr (64 - 37))) xor b6
  b2 += b1
  b1 = ((b1 shl 33) or (b1 shr (64 - 33))) xor b2
  b4 += b7
  b7 = ((b7 shl 27) or (b7 shr (64 - 27))) xor b4
  b6 += b5
  b5 = ((b5 shl 14) or (b5 shr (64 - 14))) xor b6
  b0 += b3
  b3 = ((b3 shl 42) or (b3 shr (64 - 42))) xor b0
  b4 += b1
  b1 = ((b1 shl 17) or (b1 shr (64 - 17))) xor b4
  b6 += b3
  b3 = ((b3 shl 49) or (b3 shr (64 - 49))) xor b6
  b0 += b5
  b5 = ((b5 shl 36) or (b5 shr (64 - 36))) xor b0
  b2 += b7
  b7 = ((b7 shl 39) or (b7 shr (64 - 39))) xor b2
  b6 += b1
  b1 = ((b1 shl 44) or (b1 shr (64 - 44))) xor b6
  b0 += b7
  b7 = ((b7 shl 9) or (b7 shr (64 - 9))) xor b0
  b2 += b5
  b5 = ((b5 shl 54) or (b5 shr (64 - 54))) xor b2
  b4 += b3
  b3 = ((b3 shl 56) or (b3 shr (64 - 56))) xor b4
  b1 += k3
  b0 += b1 + k2
  b1 = ((b1 shl 39) or (b1 shr (64 - 39))) xor b0
  b3 += k5
  b2 += b3 + k4
  b3 = ((b3 shl 30) or (b3 shr (64 - 30))) xor b2
  b5 += k7 + t2
  b4 += b5 + k6
  b5 = ((b5 shl 34) or (b5 shr (64 - 34))) xor b4
  b7 += k0 + 11
  b6 += b7 + k8 + t0
  b7 = ((b7 shl 24) or (b7 shr (64 - 24))) xor b6
  b2 += b1
  b1 = ((b1 shl 13) or (b1 shr (64 - 13))) xor b2
  b4 += b7
  b7 = ((b7 shl 50) or (b7 shr (64 - 50))) xor b4
  b6 += b5
  b5 = ((b5 shl 10) or (b5 shr (64 - 10))) xor b6
  b0 += b3
  b3 = ((b3 shl 17) or (b3 shr (64 - 17))) xor b0
  b4 += b1
  b1 = ((b1 shl 25) or (b1 shr (64 - 25))) xor b4
  b6 += b3
  b3 = ((b3 shl 29) or (b3 shr (64 - 29))) xor b6
  b0 += b5
  b5 = ((b5 shl 39) or (b5 shr (64 - 39))) xor b0
  b2 += b7
  b7 = ((b7 shl 43) or (b7 shr (64 - 43))) xor b2
  b6 += b1
  b1 = ((b1 shl 8) or (b1 shr (64 - 8))) xor b6
  b0 += b7
  b7 = ((b7 shl 35) or (b7 shr (64 - 35))) xor b0
  b2 += b5
  b5 = ((b5 shl 56) or (b5 shr (64 - 56))) xor b2
  b4 += b3
  b3 = ((b3 shl 22) or (b3 shr (64 - 22))) xor b4
  b1 += k4
  b0 += b1 + k3
  b1 = ((b1 shl 46) or (b1 shr (64 - 46))) xor b0
  b3 += k6
  b2 += b3 + k5
  b3 = ((b3 shl 36) or (b3 shr (64 - 36))) xor b2
  b5 += k8 + t0
  b4 += b5 + k7
  b5 = ((b5 shl 19) or (b5 shr (64 - 19))) xor b4
  b7 += k1 + 12
  b6 += b7 + k0 + t1
  b7 = ((b7 shl 37) or (b7 shr (64 - 37))) xor b6
  b2 += b1
  b1 = ((b1 shl 33) or (b1 shr (64 - 33))) xor b2
  b4 += b7
  b7 = ((b7 shl 27) or (b7 shr (64 - 27))) xor b4
  b6 += b5
  b5 = ((b5 shl 14) or (b5 shr (64 - 14))) xor b6
  b0 += b3
  b3 = ((b3 shl 42) or (b3 shr (64 - 42))) xor b0
  b4 += b1
  b1 = ((b1 shl 17) or (b1 shr (64 - 17))) xor b4
  b6 += b3
  b3 = ((b3 shl 49) or (b3 shr (64 - 49))) xor b6
  b0 += b5
  b5 = ((b5 shl 36) or (b5 shr (64 - 36))) xor b0
  b2 += b7
  b7 = ((b7 shl 39) or (b7 shr (64 - 39))) xor b2
  b6 += b1
  b1 = ((b1 shl 44) or (b1 shr (64 - 44))) xor b6
  b0 += b7
  b7 = ((b7 shl 9) or (b7 shr (64 - 9))) xor b0
  b2 += b5
  b5 = ((b5 shl 54) or (b5 shr (64 - 54))) xor b2
  b4 += b3
  b3 = ((b3 shl 56) or (b3 shr (64 - 56))) xor b4
  b1 += k5
  b0 += b1 + k4
  b1 = ((b1 shl 39) or (b1 shr (64 - 39))) xor b0
  b3 += k7
  b2 += b3 + k6
  b3 = ((b3 shl 30) or (b3 shr (64 - 30))) xor b2
  b5 += k0 + t1
  b4 += b5 + k8
  b5 = ((b5 shl 34) or (b5 shr (64 - 34))) xor b4
  b7 += k2 + 13
  b6 += b7 + k1 + t2
  b7 = ((b7 shl 24) or (b7 shr (64 - 24))) xor b6
  b2 += b1
  b1 = ((b1 shl 13) or (b1 shr (64 - 13))) xor b2
  b4 += b7
  b7 = ((b7 shl 50) or (b7 shr (64 - 50))) xor b4
  b6 += b5
  b5 = ((b5 shl 10) or (b5 shr (64 - 10))) xor b6
  b0 += b3
  b3 = ((b3 shl 17) or (b3 shr (64 - 17))) xor b0
  b4 += b1
  b1 = ((b1 shl 25) or (b1 shr (64 - 25))) xor b4
  b6 += b3
  b3 = ((b3 shl 29) or (b3 shr (64 - 29))) xor b6
  b0 += b5
  b5 = ((b5 shl 39) or (b5 shr (64 - 39))) xor b0
  b2 += b7
  b7 = ((b7 shl 43) or (b7 shr (64 - 43))) xor b2
  b6 += b1
  b1 = ((b1 shl 8) or (b1 shr (64 - 8))) xor b6
  b0 += b7
  b7 = ((b7 shl 35) or (b7 shr (64 - 35))) xor b0
  b2 += b5
  b5 = ((b5 shl 56) or (b5 shr (64 - 56))) xor b2
  b4 += b3
  b3 = ((b3 shl 22) or (b3 shr (64 - 22))) xor b4
  b1 += k6
  b0 += b1 + k5
  b1 = ((b1 shl 46) or (b1 shr (64 - 46))) xor b0
  b3 += k8
  b2 += b3 + k7
  b3 = ((b3 shl 36) or (b3 shr (64 - 36))) xor b2
  b5 += k1 + t2
  b4 += b5 + k0
  b5 = ((b5 shl 19) or (b5 shr (64 - 19))) xor b4
  b7 += k3 + 14
  b6 += b7 + k2 + t0
  b7 = ((b7 shl 37) or (b7 shr (64 - 37))) xor b6
  b2 += b1
  b1 = ((b1 shl 33) or (b1 shr (64 - 33))) xor b2
  b4 += b7
  b7 = ((b7 shl 27) or (b7 shr (64 - 27))) xor b4
  b6 += b5
  b5 = ((b5 shl 14) or (b5 shr (64 - 14))) xor b6
  b0 += b3
  b3 = ((b3 shl 42) or (b3 shr (64 - 42))) xor b0
  b4 += b1
  b1 = ((b1 shl 17) or (b1 shr (64 - 17))) xor b4
  b6 += b3
  b3 = ((b3 shl 49) or (b3 shr (64 - 49))) xor b6
  b0 += b5
  b5 = ((b5 shl 36) or (b5 shr (64 - 36))) xor b0
  b2 += b7
  b7 = ((b7 shl 39) or (b7 shr (64 - 39))) xor b2
  b6 += b1
  b1 = ((b1 shl 44) or (b1 shr (64 - 44))) xor b6
  b0 += b7
  b7 = ((b7 shl 9) or (b7 shr (64 - 9))) xor b0
  b2 += b5
  b5 = ((b5 shl 54) or (b5 shr (64 - 54))) xor b2
  b4 += b3
  b3 = ((b3 shl 56) or (b3 shr (64 - 56))) xor b4
  b1 += k7
  b0 += b1 + k6
  b1 = ((b1 shl 39) or (b1 shr (64 - 39))) xor b0
  b3 += k0
  b2 += b3 + k8
  b3 = ((b3 shl 30) or (b3 shr (64 - 30))) xor b2
  b5 += k2 + t0
  b4 += b5 + k1
  b5 = ((b5 shl 34) or (b5 shr (64 - 34))) xor b4
  b7 += k4 + 15
  b6 += b7 + k3 + t1
  b7 = ((b7 shl 24) or (b7 shr (64 - 24))) xor b6
  b2 += b1
  b1 = ((b1 shl 13) or (b1 shr (64 - 13))) xor b2
  b4 += b7
  b7 = ((b7 shl 50) or (b7 shr (64 - 50))) xor b4
  b6 += b5
  b5 = ((b5 shl 10) or (b5 shr (64 - 10))) xor b6
  b0 += b3
  b3 = ((b3 shl 17) or (b3 shr (64 - 17))) xor b0
  b4 += b1
  b1 = ((b1 shl 25) or (b1 shr (64 - 25))) xor b4
  b6 += b3
  b3 = ((b3 shl 29) or (b3 shr (64 - 29))) xor b6
  b0 += b5
  b5 = ((b5 shl 39) or (b5 shr (64 - 39))) xor b0
  b2 += b7
  b7 = ((b7 shl 43) or (b7 shr (64 - 43))) xor b2
  b6 += b1
  b1 = ((b1 shl 8) or (b1 shr (64 - 8))) xor b6
  b0 += b7
  b7 = ((b7 shl 35) or (b7 shr (64 - 35))) xor b0
  b2 += b5
  b5 = ((b5 shl 56) or (b5 shr (64 - 56))) xor b2
  b4 += b3
  b3 = ((b3 shl 22) or (b3 shr (64 - 22))) xor b4
  b1 += k8
  b0 += b1 + k7
  b1 = ((b1 shl 46) or (b1 shr (64 - 46))) xor b0
  b3 += k1
  b2 += b3 + k0
  b3 = ((b3 shl 36) or (b3 shr (64 - 36))) xor b2
  b5 += k3 + t1
  b4 += b5 + k2
  b5 = ((b5 shl 19) or (b5 shr (64 - 19))) xor b4
  b7 += k5 + 16
  b6 += b7 + k4 + t2
  b7 = ((b7 shl 37) or (b7 shr (64 - 37))) xor b6
  b2 += b1
  b1 = ((b1 shl 33) or (b1 shr (64 - 33))) xor b2
  b4 += b7
  b7 = ((b7 shl 27) or (b7 shr (64 - 27))) xor b4
  b6 += b5
  b5 = ((b5 shl 14) or (b5 shr (64 - 14))) xor b6
  b0 += b3
  b3 = ((b3 shl 42) or (b3 shr (64 - 42))) xor b0
  b4 += b1
  b1 = ((b1 shl 17) or (b1 shr (64 - 17))) xor b4
  b6 += b3
  b3 = ((b3 shl 49) or (b3 shr (64 - 49))) xor b6
  b0 += b5
  b5 = ((b5 shl 36) or (b5 shr (64 - 36))) xor b0
  b2 += b7
  b7 = ((b7 shl 39) or (b7 shr (64 - 39))) xor b2
  b6 += b1
  b1 = ((b1 shl 44) or (b1 shr (64 - 44))) xor b6
  b0 += b7
  b7 = ((b7 shl 9) or (b7 shr (64 - 9))) xor b0
  b2 += b5
  b5 = ((b5 shl 54) or (b5 shr (64 - 54))) xor b2
  b4 += b3
  b3 = ((b3 shl 56) or (b3 shr (64 - 56))) xor b4
  b1 += k0
  b0 += b1 + k8
  b1 = ((b1 shl 39) or (b1 shr (64 - 39))) xor b0
  b3 += k2
  b2 += b3 + k1
  b3 = ((b3 shl 30) or (b3 shr (64 - 30))) xor b2
  b5 += k4 + t2
  b4 += b5 + k3
  b5 = ((b5 shl 34) or (b5 shr (64 - 34))) xor b4
  b7 += k6 + 17
  b6 += b7 + k5 + t0
  b7 = ((b7 shl 24) or (b7 shr (64 - 24))) xor b6
  b2 += b1
  b1 = ((b1 shl 13) or (b1 shr (64 - 13))) xor b2
  b4 += b7
  b7 = ((b7 shl 50) or (b7 shr (64 - 50))) xor b4
  b6 += b5
  b5 = ((b5 shl 10) or (b5 shr (64 - 10))) xor b6
  b0 += b3
  b3 = ((b3 shl 17) or (b3 shr (64 - 17))) xor b0
  b4 += b1
  b1 = ((b1 shl 25) or (b1 shr (64 - 25))) xor b4
  b6 += b3
  b3 = ((b3 shl 29) or (b3 shr (64 - 29))) xor b6
  b0 += b5
  b5 = ((b5 shl 39) or (b5 shr (64 - 39))) xor b0
  b2 += b7
  b7 = ((b7 shl 43) or (b7 shr (64 - 43))) xor b2
  b6 += b1
  b1 = ((b1 shl 8) or (b1 shr (64 - 8))) xor b6
  b0 += b7
  b7 = ((b7 shl 35) or (b7 shr (64 - 35))) xor b0
  b2 += b5
  b5 = ((b5 shl 56) or (b5 shr (64 - 56))) xor b2
  b4 += b3
  b3 = ((b3 shl 22) or (b3 shr (64 - 22))) xor b4

  output[0] = b0 + k0
  output[1] = b1 + k1
  output[2] = b2 + k2
  output[3] = b3 + k3
  output[4] = b4 + k4
  output[5] = b5 + k5 + t0
  output[6] = b6 + k6 + t1
  output[7] = b7 + k7 + 18

proc decrypt(c: Cipher, input: openarray[uint64], output: var openarray[uint64]) =
  var tf = Threefish512(c)
  var
    b0 = input[0]
    b1 = input[1]
    b2 = input[2]
    b3 = input[3]
    b4 = input[4]
    b5 = input[5]
    b6 = input[6]
    b7 = input[7]

    k0 = tf.expandedKey[0]
    k1 = tf.expandedKey[1]
    k2 = tf.expandedKey[2]
    k3 = tf.expandedKey[3]
    k4 = tf.expandedKey[4]
    k5 = tf.expandedKey[5]
    k6 = tf.expandedKey[6]
    k7 = tf.expandedKey[7]
    k8 = tf.expandedKey[8]

    t0 = tf.expandedTweak[0]
    t1 = tf.expandedTweak[1]
    t2 = tf.expandedTweak[2]

  var tmp: uint64

  block decryption:
    b0 -= k0
    b1 -= k1
    b2 -= k2
    b3 -= k3
    b4 -= k4
    b5 -= k5 + t0
    b6 -= k6 + t1
    b7 -= k7 + 18
    tmp = b3 xor b4
    b3 = (tmp shr 22) or (tmp shl (64 - 22))
    b4 -= b3
    tmp = b5 xor b2
    b5 = (tmp shr 56) or (tmp shl (64 - 56))
    b2 -= b5
    tmp = b7 xor b0
    b7 = (tmp shr 35) or (tmp shl (64 - 35))
    b0 -= b7
    tmp = b1 xor b6
    b1 = (tmp shr 8) or (tmp shl (64 - 8))
    b6 -= b1
    tmp = b7 xor b2
    b7 = (tmp shr 43) or (tmp shl (64 - 43))
    b2 -= b7
    tmp = b5 xor b0
    b5 = (tmp shr 39) or (tmp shl (64 - 39))
    b0 -= b5
    tmp = b3 xor b6
    b3 = (tmp shr 29) or (tmp shl (64 - 29))
    b6 -= b3
    tmp = b1 xor b4
    b1 = (tmp shr 25) or (tmp shl (64 - 25))
    b4 -= b1
    tmp = b3 xor b0
    b3 = (tmp shr 17) or (tmp shl (64 - 17))
    b0 -= b3
    tmp = b5 xor b6
    b5 = (tmp shr 10) or (tmp shl (64 - 10))
    b6 -= b5
    tmp = b7 xor b4
    b7 = (tmp shr 50) or (tmp shl (64 - 50))
    b4 -= b7
    tmp = b1 xor b2
    b1 = (tmp shr 13) or (tmp shl (64 - 13))
    b2 -= b1
    tmp = b7 xor b6
    b7 = (tmp shr 24) or (tmp shl (64 - 24))
    b6 -= b7 + k5 + t0
    b7 -= k6 + 17
    tmp = b5 xor b4
    b5 = (tmp shr 34) or (tmp shl (64 - 34))
    b4 -= b5 + k3
    b5 -= k4 + t2
    tmp = b3 xor b2
    b3 = (tmp shr 30) or (tmp shl (64 - 30))
    b2 -= b3 + k1
    b3 -= k2
    tmp = b1 xor b0
    b1 = (tmp shr 39) or (tmp shl (64 - 39))
    b0 -= b1 + k8
    b1 -= k0
    tmp = b3 xor b4
    b3 = (tmp shr 56) or (tmp shl (64 - 56))
    b4 -= b3
    tmp = b5 xor b2
    b5 = (tmp shr 54) or (tmp shl (64 - 54))
    b2 -= b5
    tmp = b7 xor b0
    b7 = (tmp shr 9) or (tmp shl (64 - 9))
    b0 -= b7
    tmp = b1 xor b6
    b1 = (tmp shr 44) or (tmp shl (64 - 44))
    b6 -= b1
    tmp = b7 xor b2
    b7 = (tmp shr 39) or (tmp shl (64 - 39))
    b2 -= b7
    tmp = b5 xor b0
    b5 = (tmp shr 36) or (tmp shl (64 - 36))
    b0 -= b5
    tmp = b3 xor b6
    b3 = (tmp shr 49) or (tmp shl (64 - 49))
    b6 -= b3
    tmp = b1 xor b4
    b1 = (tmp shr 17) or (tmp shl (64 - 17))
    b4 -= b1
    tmp = b3 xor b0
    b3 = (tmp shr 42) or (tmp shl (64 - 42))
    b0 -= b3
    tmp = b5 xor b6
    b5 = (tmp shr 14) or (tmp shl (64 - 14))
    b6 -= b5
    tmp = b7 xor b4
    b7 = (tmp shr 27) or (tmp shl (64 - 27))
    b4 -= b7
    tmp = b1 xor b2
    b1 = (tmp shr 33) or (tmp shl (64 - 33))
    b2 -= b1
    tmp = b7 xor b6
    b7 = (tmp shr 37) or (tmp shl (64 - 37))
    b6 -= b7 + k4 + t2
    b7 -= k5 + 16
    tmp = b5 xor b4
    b5 = (tmp shr 19) or (tmp shl (64 - 19))
    b4 -= b5 + k2
    b5 -= k3 + t1
    tmp = b3 xor b2
    b3 = (tmp shr 36) or (tmp shl (64 - 36))
    b2 -= b3 + k0
    b3 -= k1
    tmp = b1 xor b0
    b1 = (tmp shr 46) or (tmp shl (64 - 46))
    b0 -= b1 + k7
    b1 -= k8
    tmp = b3 xor b4
    b3 = (tmp shr 22) or (tmp shl (64 - 22))
    b4 -= b3
    tmp = b5 xor b2
    b5 = (tmp shr 56) or (tmp shl (64 - 56))
    b2 -= b5
    tmp = b7 xor b0
    b7 = (tmp shr 35) or (tmp shl (64 - 35))
    b0 -= b7
    tmp = b1 xor b6
    b1 = (tmp shr 8) or (tmp shl (64 - 8))
    b6 -= b1
    tmp = b7 xor b2
    b7 = (tmp shr 43) or (tmp shl (64 - 43))
    b2 -= b7
    tmp = b5 xor b0
    b5 = (tmp shr 39) or (tmp shl (64 - 39))
    b0 -= b5
    tmp = b3 xor b6
    b3 = (tmp shr 29) or (tmp shl (64 - 29))
    b6 -= b3
    tmp = b1 xor b4
    b1 = (tmp shr 25) or (tmp shl (64 - 25))
    b4 -= b1
    tmp = b3 xor b0
    b3 = (tmp shr 17) or (tmp shl (64 - 17))
    b0 -= b3
    tmp = b5 xor b6
    b5 = (tmp shr 10) or (tmp shl (64 - 10))
    b6 -= b5
    tmp = b7 xor b4
    b7 = (tmp shr 50) or (tmp shl (64 - 50))
    b4 -= b7
    tmp = b1 xor b2
    b1 = (tmp shr 13) or (tmp shl (64 - 13))
    b2 -= b1
    tmp = b7 xor b6
    b7 = (tmp shr 24) or (tmp shl (64 - 24))
    b6 -= b7 + k3 + t1
    b7 -= k4 + 15
    tmp = b5 xor b4
    b5 = (tmp shr 34) or (tmp shl (64 - 34))
    b4 -= b5 + k1
    b5 -= k2 + t0
    tmp = b3 xor b2
    b3 = (tmp shr 30) or (tmp shl (64 - 30))
    b2 -= b3 + k8
    b3 -= k0
    tmp = b1 xor b0
    b1 = (tmp shr 39) or (tmp shl (64 - 39))
    b0 -= b1 + k6
    b1 -= k7
    tmp = b3 xor b4
    b3 = (tmp shr 56) or (tmp shl (64 - 56))
    b4 -= b3
    tmp = b5 xor b2
    b5 = (tmp shr 54) or (tmp shl (64 - 54))
    b2 -= b5
    tmp = b7 xor b0
    b7 = (tmp shr 9) or (tmp shl (64 - 9))
    b0 -= b7
    tmp = b1 xor b6
    b1 = (tmp shr 44) or (tmp shl (64 - 44))
    b6 -= b1
    tmp = b7 xor b2
    b7 = (tmp shr 39) or (tmp shl (64 - 39))
    b2 -= b7
    tmp = b5 xor b0
    b5 = (tmp shr 36) or (tmp shl (64 - 36))
    b0 -= b5
    tmp = b3 xor b6
    b3 = (tmp shr 49) or (tmp shl (64 - 49))
    b6 -= b3
    tmp = b1 xor b4
    b1 = (tmp shr 17) or (tmp shl (64 - 17))
    b4 -= b1
    tmp = b3 xor b0
    b3 = (tmp shr 42) or (tmp shl (64 - 42))
    b0 -= b3
    tmp = b5 xor b6
    b5 = (tmp shr 14) or (tmp shl (64 - 14))
    b6 -= b5
    tmp = b7 xor b4
    b7 = (tmp shr 27) or (tmp shl (64 - 27))
    b4 -= b7
    tmp = b1 xor b2
    b1 = (tmp shr 33) or (tmp shl (64 - 33))
    b2 -= b1
    tmp = b7 xor b6
    b7 = (tmp shr 37) or (tmp shl (64 - 37))
    b6 -= b7 + k2 + t0
    b7 -= k3 + 14
    tmp = b5 xor b4
    b5 = (tmp shr 19) or (tmp shl (64 - 19))
    b4 -= b5 + k0
    b5 -= k1 + t2
    tmp = b3 xor b2
    b3 = (tmp shr 36) or (tmp shl (64 - 36))
    b2 -= b3 + k7
    b3 -= k8
    tmp = b1 xor b0
    b1 = (tmp shr 46) or (tmp shl (64 - 46))
    b0 -= b1 + k5
    b1 -= k6
    tmp = b3 xor b4
    b3 = (tmp shr 22) or (tmp shl (64 - 22))
    b4 -= b3
    tmp = b5 xor b2
    b5 = (tmp shr 56) or (tmp shl (64 - 56))
    b2 -= b5
    tmp = b7 xor b0
    b7 = (tmp shr 35) or (tmp shl (64 - 35))
    b0 -= b7
    tmp = b1 xor b6
    b1 = (tmp shr 8) or (tmp shl (64 - 8))
    b6 -= b1
    tmp = b7 xor b2
    b7 = (tmp shr 43) or (tmp shl (64 - 43))
    b2 -= b7
    tmp = b5 xor b0
    b5 = (tmp shr 39) or (tmp shl (64 - 39))
    b0 -= b5
    tmp = b3 xor b6
    b3 = (tmp shr 29) or (tmp shl (64 - 29))
    b6 -= b3
    tmp = b1 xor b4
    b1 = (tmp shr 25) or (tmp shl (64 - 25))
    b4 -= b1
    tmp = b3 xor b0
    b3 = (tmp shr 17) or (tmp shl (64 - 17))
    b0 -= b3
    tmp = b5 xor b6
    b5 = (tmp shr 10) or (tmp shl (64 - 10))
    b6 -= b5
    tmp = b7 xor b4
    b7 = (tmp shr 50) or (tmp shl (64 - 50))
    b4 -= b7
    tmp = b1 xor b2
    b1 = (tmp shr 13) or (tmp shl (64 - 13))
    b2 -= b1
    tmp = b7 xor b6
    b7 = (tmp shr 24) or (tmp shl (64 - 24))
    b6 -= b7 + k1 + t2
    b7 -= k2 + 13
    tmp = b5 xor b4
    b5 = (tmp shr 34) or (tmp shl (64 - 34))
    b4 -= b5 + k8
    b5 -= k0 + t1
    tmp = b3 xor b2
    b3 = (tmp shr 30) or (tmp shl (64 - 30))
    b2 -= b3 + k6
    b3 -= k7
    tmp = b1 xor b0
    b1 = (tmp shr 39) or (tmp shl (64 - 39))
    b0 -= b1 + k4
    b1 -= k5
    tmp = b3 xor b4
    b3 = (tmp shr 56) or (tmp shl (64 - 56))
    b4 -= b3
    tmp = b5 xor b2
    b5 = (tmp shr 54) or (tmp shl (64 - 54))
    b2 -= b5
    tmp = b7 xor b0
    b7 = (tmp shr 9) or (tmp shl (64 - 9))
    b0 -= b7
    tmp = b1 xor b6
    b1 = (tmp shr 44) or (tmp shl (64 - 44))
    b6 -= b1
    tmp = b7 xor b2
    b7 = (tmp shr 39) or (tmp shl (64 - 39))
    b2 -= b7
    tmp = b5 xor b0
    b5 = (tmp shr 36) or (tmp shl (64 - 36))
    b0 -= b5
    tmp = b3 xor b6
    b3 = (tmp shr 49) or (tmp shl (64 - 49))
    b6 -= b3
    tmp = b1 xor b4
    b1 = (tmp shr 17) or (tmp shl (64 - 17))
    b4 -= b1
    tmp = b3 xor b0
    b3 = (tmp shr 42) or (tmp shl (64 - 42))
    b0 -= b3
    tmp = b5 xor b6
    b5 = (tmp shr 14) or (tmp shl (64 - 14))
    b6 -= b5
    tmp = b7 xor b4
    b7 = (tmp shr 27) or (tmp shl (64 - 27))
    b4 -= b7
    tmp = b1 xor b2
    b1 = (tmp shr 33) or (tmp shl (64 - 33))
    b2 -= b1
    tmp = b7 xor b6
    b7 = (tmp shr 37) or (tmp shl (64 - 37))
    b6 -= b7 + k0 + t1
    b7 -= k1 + 12
    tmp = b5 xor b4
    b5 = (tmp shr 19) or (tmp shl (64 - 19))
    b4 -= b5 + k7
    b5 -= k8 + t0
    tmp = b3 xor b2
    b3 = (tmp shr 36) or (tmp shl (64 - 36))
    b2 -= b3 + k5
    b3 -= k6
    tmp = b1 xor b0
    b1 = (tmp shr 46) or (tmp shl (64 - 46))
    b0 -= b1 + k3
    b1 -= k4
    tmp = b3 xor b4
    b3 = (tmp shr 22) or (tmp shl (64 - 22))
    b4 -= b3
    tmp = b5 xor b2
    b5 = (tmp shr 56) or (tmp shl (64 - 56))
    b2 -= b5
    tmp = b7 xor b0
    b7 = (tmp shr 35) or (tmp shl (64 - 35))
    b0 -= b7
    tmp = b1 xor b6
    b1 = (tmp shr 8) or (tmp shl (64 - 8))
    b6 -= b1
    tmp = b7 xor b2
    b7 = (tmp shr 43) or (tmp shl (64 - 43))
    b2 -= b7
    tmp = b5 xor b0
    b5 = (tmp shr 39) or (tmp shl (64 - 39))
    b0 -= b5
    tmp = b3 xor b6
    b3 = (tmp shr 29) or (tmp shl (64 - 29))
    b6 -= b3
    tmp = b1 xor b4
    b1 = (tmp shr 25) or (tmp shl (64 - 25))
    b4 -= b1
    tmp = b3 xor b0
    b3 = (tmp shr 17) or (tmp shl (64 - 17))
    b0 -= b3
    tmp = b5 xor b6
    b5 = (tmp shr 10) or (tmp shl (64 - 10))
    b6 -= b5
    tmp = b7 xor b4
    b7 = (tmp shr 50) or (tmp shl (64 - 50))
    b4 -= b7
    tmp = b1 xor b2
    b1 = (tmp shr 13) or (tmp shl (64 - 13))
    b2 -= b1
    tmp = b7 xor b6
    b7 = (tmp shr 24) or (tmp shl (64 - 24))
    b6 -= b7 + k8 + t0
    b7 -= k0 + 11
    tmp = b5 xor b4
    b5 = (tmp shr 34) or (tmp shl (64 - 34))
    b4 -= b5 + k6
    b5 -= k7 + t2
    tmp = b3 xor b2
    b3 = (tmp shr 30) or (tmp shl (64 - 30))
    b2 -= b3 + k4
    b3 -= k5
    tmp = b1 xor b0
    b1 = (tmp shr 39) or (tmp shl (64 - 39))
    b0 -= b1 + k2
    b1 -= k3
    tmp = b3 xor b4
    b3 = (tmp shr 56) or (tmp shl (64 - 56))
    b4 -= b3
    tmp = b5 xor b2
    b5 = (tmp shr 54) or (tmp shl (64 - 54))
    b2 -= b5
    tmp = b7 xor b0
    b7 = (tmp shr 9) or (tmp shl (64 - 9))
    b0 -= b7
    tmp = b1 xor b6
    b1 = (tmp shr 44) or (tmp shl (64 - 44))
    b6 -= b1
    tmp = b7 xor b2
    b7 = (tmp shr 39) or (tmp shl (64 - 39))
    b2 -= b7
    tmp = b5 xor b0
    b5 = (tmp shr 36) or (tmp shl (64 - 36))
    b0 -= b5
    tmp = b3 xor b6
    b3 = (tmp shr 49) or (tmp shl (64 - 49))
    b6 -= b3
    tmp = b1 xor b4
    b1 = (tmp shr 17) or (tmp shl (64 - 17))
    b4 -= b1
    tmp = b3 xor b0
    b3 = (tmp shr 42) or (tmp shl (64 - 42))
    b0 -= b3
    tmp = b5 xor b6
    b5 = (tmp shr 14) or (tmp shl (64 - 14))
    b6 -= b5
    tmp = b7 xor b4
    b7 = (tmp shr 27) or (tmp shl (64 - 27))
    b4 -= b7
    tmp = b1 xor b2
    b1 = (tmp shr 33) or (tmp shl (64 - 33))
    b2 -= b1
    tmp = b7 xor b6
    b7 = (tmp shr 37) or (tmp shl (64 - 37))
    b6 -= b7 + k7 + t2
    b7 -= k8 + 10
    tmp = b5 xor b4
    b5 = (tmp shr 19) or (tmp shl (64 - 19))
    b4 -= b5 + k5
    b5 -= k6 + t1
    tmp = b3 xor b2
    b3 = (tmp shr 36) or (tmp shl (64 - 36))
    b2 -= b3 + k3
    b3 -= k4
    tmp = b1 xor b0
    b1 = (tmp shr 46) or (tmp shl (64 - 46))
    b0 -= b1 + k1
    b1 -= k2
    tmp = b3 xor b4
    b3 = (tmp shr 22) or (tmp shl (64 - 22))
    b4 -= b3
    tmp = b5 xor b2
    b5 = (tmp shr 56) or (tmp shl (64 - 56))
    b2 -= b5
    tmp = b7 xor b0
    b7 = (tmp shr 35) or (tmp shl (64 - 35))
    b0 -= b7
    tmp = b1 xor b6
    b1 = (tmp shr 8) or (tmp shl (64 - 8))
    b6 -= b1
    tmp = b7 xor b2
    b7 = (tmp shr 43) or (tmp shl (64 - 43))
    b2 -= b7
    tmp = b5 xor b0
    b5 = (tmp shr 39) or (tmp shl (64 - 39))
    b0 -= b5
    tmp = b3 xor b6
    b3 = (tmp shr 29) or (tmp shl (64 - 29))
    b6 -= b3
    tmp = b1 xor b4
    b1 = (tmp shr 25) or (tmp shl (64 - 25))
    b4 -= b1
    tmp = b3 xor b0
    b3 = (tmp shr 17) or (tmp shl (64 - 17))
    b0 -= b3
    tmp = b5 xor b6
    b5 = (tmp shr 10) or (tmp shl (64 - 10))
    b6 -= b5
    tmp = b7 xor b4
    b7 = (tmp shr 50) or (tmp shl (64 - 50))
    b4 -= b7
    tmp = b1 xor b2
    b1 = (tmp shr 13) or (tmp shl (64 - 13))
    b2 -= b1
    tmp = b7 xor b6
    b7 = (tmp shr 24) or (tmp shl (64 - 24))
    b6 -= b7 + k6 + t1
    b7 -= k7 + 9
    tmp = b5 xor b4
    b5 = (tmp shr 34) or (tmp shl (64 - 34))
    b4 -= b5 + k4
    b5 -= k5 + t0
    tmp = b3 xor b2
    b3 = (tmp shr 30) or (tmp shl (64 - 30))
    b2 -= b3 + k2
    b3 -= k3
    tmp = b1 xor b0
    b1 = (tmp shr 39) or (tmp shl (64 - 39))
    b0 -= b1 + k0
    b1 -= k1
    tmp = b3 xor b4
    b3 = (tmp shr 56) or (tmp shl (64 - 56))
    b4 -= b3
    tmp = b5 xor b2
    b5 = (tmp shr 54) or (tmp shl (64 - 54))
    b2 -= b5
    tmp = b7 xor b0
    b7 = (tmp shr 9) or (tmp shl (64 - 9))
    b0 -= b7
    tmp = b1 xor b6
    b1 = (tmp shr 44) or (tmp shl (64 - 44))
    b6 -= b1
    tmp = b7 xor b2
    b7 = (tmp shr 39) or (tmp shl (64 - 39))
    b2 -= b7
    tmp = b5 xor b0
    b5 = (tmp shr 36) or (tmp shl (64 - 36))
    b0 -= b5
    tmp = b3 xor b6
    b3 = (tmp shr 49) or (tmp shl (64 - 49))
    b6 -= b3
    tmp = b1 xor b4
    b1 = (tmp shr 17) or (tmp shl (64 - 17))
    b4 -= b1
    tmp = b3 xor b0
    b3 = (tmp shr 42) or (tmp shl (64 - 42))
    b0 -= b3
    tmp = b5 xor b6
    b5 = (tmp shr 14) or (tmp shl (64 - 14))
    b6 -= b5
    tmp = b7 xor b4
    b7 = (tmp shr 27) or (tmp shl (64 - 27))
    b4 -= b7
    tmp = b1 xor b2
    b1 = (tmp shr 33) or (tmp shl (64 - 33))
    b2 -= b1
    tmp = b7 xor b6
    b7 = (tmp shr 37) or (tmp shl (64 - 37))
    b6 -= b7 + k5 + t0
    b7 -= k6 + 8
    tmp = b5 xor b4
    b5 = (tmp shr 19) or (tmp shl (64 - 19))
    b4 -= b5 + k3
    b5 -= k4 + t2
    tmp = b3 xor b2
    b3 = (tmp shr 36) or (tmp shl (64 - 36))
    b2 -= b3 + k1
    b3 -= k2
    tmp = b1 xor b0
    b1 = (tmp shr 46) or (tmp shl (64 - 46))
    b0 -= b1 + k8
    b1 -= k0
    tmp = b3 xor b4
    b3 = (tmp shr 22) or (tmp shl (64 - 22))
    b4 -= b3
    tmp = b5 xor b2
    b5 = (tmp shr 56) or (tmp shl (64 - 56))
    b2 -= b5
    tmp = b7 xor b0
    b7 = (tmp shr 35) or (tmp shl (64 - 35))
    b0 -= b7
    tmp = b1 xor b6
    b1 = (tmp shr 8) or (tmp shl (64 - 8))
    b6 -= b1
    tmp = b7 xor b2
    b7 = (tmp shr 43) or (tmp shl (64 - 43))
    b2 -= b7
    tmp = b5 xor b0
    b5 = (tmp shr 39) or (tmp shl (64 - 39))
    b0 -= b5
    tmp = b3 xor b6
    b3 = (tmp shr 29) or (tmp shl (64 - 29))
    b6 -= b3
    tmp = b1 xor b4
    b1 = (tmp shr 25) or (tmp shl (64 - 25))
    b4 -= b1
    tmp = b3 xor b0
    b3 = (tmp shr 17) or (tmp shl (64 - 17))
    b0 -= b3
    tmp = b5 xor b6
    b5 = (tmp shr 10) or (tmp shl (64 - 10))
    b6 -= b5
    tmp = b7 xor b4
    b7 = (tmp shr 50) or (tmp shl (64 - 50))
    b4 -= b7
    tmp = b1 xor b2
    b1 = (tmp shr 13) or (tmp shl (64 - 13))
    b2 -= b1
    tmp = b7 xor b6
    b7 = (tmp shr 24) or (tmp shl (64 - 24))
    b6 -= b7 + k4 + t2
    b7 -= k5 + 7
    tmp = b5 xor b4
    b5 = (tmp shr 34) or (tmp shl (64 - 34))
    b4 -= b5 + k2
    b5 -= k3 + t1
    tmp = b3 xor b2
    b3 = (tmp shr 30) or (tmp shl (64 - 30))
    b2 -= b3 + k0
    b3 -= k1
    tmp = b1 xor b0
    b1 = (tmp shr 39) or (tmp shl (64 - 39))
    b0 -= b1 + k7
    b1 -= k8
    tmp = b3 xor b4
    b3 = (tmp shr 56) or (tmp shl (64 - 56))
    b4 -= b3
    tmp = b5 xor b2
    b5 = (tmp shr 54) or (tmp shl (64 - 54))
    b2 -= b5
    tmp = b7 xor b0
    b7 = (tmp shr 9) or (tmp shl (64 - 9))
    b0 -= b7
    tmp = b1 xor b6
    b1 = (tmp shr 44) or (tmp shl (64 - 44))
    b6 -= b1
    tmp = b7 xor b2
    b7 = (tmp shr 39) or (tmp shl (64 - 39))
    b2 -= b7
    tmp = b5 xor b0
    b5 = (tmp shr 36) or (tmp shl (64 - 36))
    b0 -= b5
    tmp = b3 xor b6
    b3 = (tmp shr 49) or (tmp shl (64 - 49))
    b6 -= b3
    tmp = b1 xor b4
    b1 = (tmp shr 17) or (tmp shl (64 - 17))
    b4 -= b1
    tmp = b3 xor b0
    b3 = (tmp shr 42) or (tmp shl (64 - 42))
    b0 -= b3
    tmp = b5 xor b6
    b5 = (tmp shr 14) or (tmp shl (64 - 14))
    b6 -= b5
    tmp = b7 xor b4
    b7 = (tmp shr 27) or (tmp shl (64 - 27))
    b4 -= b7
    tmp = b1 xor b2
    b1 = (tmp shr 33) or (tmp shl (64 - 33))
    b2 -= b1
    tmp = b7 xor b6
    b7 = (tmp shr 37) or (tmp shl (64 - 37))
    b6 -= b7 + k3 + t1
    b7 -= k4 + 6
    tmp = b5 xor b4
    b5 = (tmp shr 19) or (tmp shl (64 - 19))
    b4 -= b5 + k1
    b5 -= k2 + t0
    tmp = b3 xor b2
    b3 = (tmp shr 36) or (tmp shl (64 - 36))
    b2 -= b3 + k8
    b3 -= k0
    tmp = b1 xor b0
    b1 = (tmp shr 46) or (tmp shl (64 - 46))
    b0 -= b1 + k6
    b1 -= k7
    tmp = b3 xor b4
    b3 = (tmp shr 22) or (tmp shl (64 - 22))
    b4 -= b3
    tmp = b5 xor b2
    b5 = (tmp shr 56) or (tmp shl (64 - 56))
    b2 -= b5
    tmp = b7 xor b0
    b7 = (tmp shr 35) or (tmp shl (64 - 35))
    b0 -= b7
    tmp = b1 xor b6
    b1 = (tmp shr 8) or (tmp shl (64 - 8))
    b6 -= b1
    tmp = b7 xor b2
    b7 = (tmp shr 43) or (tmp shl (64 - 43))
    b2 -= b7
    tmp = b5 xor b0
    b5 = (tmp shr 39) or (tmp shl (64 - 39))
    b0 -= b5
    tmp = b3 xor b6
    b3 = (tmp shr 29) or (tmp shl (64 - 29))
    b6 -= b3
    tmp = b1 xor b4
    b1 = (tmp shr 25) or (tmp shl (64 - 25))
    b4 -= b1
    tmp = b3 xor b0
    b3 = (tmp shr 17) or (tmp shl (64 - 17))
    b0 -= b3
    tmp = b5 xor b6
    b5 = (tmp shr 10) or (tmp shl (64 - 10))
    b6 -= b5
    tmp = b7 xor b4
    b7 = (tmp shr 50) or (tmp shl (64 - 50))
    b4 -= b7
    tmp = b1 xor b2
    b1 = (tmp shr 13) or (tmp shl (64 - 13))
    b2 -= b1
    tmp = b7 xor b6
    b7 = (tmp shr 24) or (tmp shl (64 - 24))
    b6 -= b7 + k2 + t0
    b7 -= k3 + 5
    tmp = b5 xor b4
    b5 = (tmp shr 34) or (tmp shl (64 - 34))
    b4 -= b5 + k0
    b5 -= k1 + t2
    tmp = b3 xor b2
    b3 = (tmp shr 30) or (tmp shl (64 - 30))
    b2 -= b3 + k7
    b3 -= k8
    tmp = b1 xor b0
    b1 = (tmp shr 39) or (tmp shl (64 - 39))
    b0 -= b1 + k5
    b1 -= k6
    tmp = b3 xor b4
    b3 = (tmp shr 56) or (tmp shl (64 - 56))
    b4 -= b3
    tmp = b5 xor b2
    b5 = (tmp shr 54) or (tmp shl (64 - 54))
    b2 -= b5
    tmp = b7 xor b0
    b7 = (tmp shr 9) or (tmp shl (64 - 9))
    b0 -= b7
    tmp = b1 xor b6
    b1 = (tmp shr 44) or (tmp shl (64 - 44))
    b6 -= b1
    tmp = b7 xor b2
    b7 = (tmp shr 39) or (tmp shl (64 - 39))
    b2 -= b7
    tmp = b5 xor b0
    b5 = (tmp shr 36) or (tmp shl (64 - 36))
    b0 -= b5
    tmp = b3 xor b6
    b3 = (tmp shr 49) or (tmp shl (64 - 49))
    b6 -= b3
    tmp = b1 xor b4
    b1 = (tmp shr 17) or (tmp shl (64 - 17))
    b4 -= b1
    tmp = b3 xor b0
    b3 = (tmp shr 42) or (tmp shl (64 - 42))
    b0 -= b3
    tmp = b5 xor b6
    b5 = (tmp shr 14) or (tmp shl (64 - 14))
    b6 -= b5
    tmp = b7 xor b4
    b7 = (tmp shr 27) or (tmp shl (64 - 27))
    b4 -= b7
    tmp = b1 xor b2
    b1 = (tmp shr 33) or (tmp shl (64 - 33))
    b2 -= b1
    tmp = b7 xor b6
    b7 = (tmp shr 37) or (tmp shl (64 - 37))
    b6 -= b7 + k1 + t2
    b7 -= k2 + 4
    tmp = b5 xor b4
    b5 = (tmp shr 19) or (tmp shl (64 - 19))
    b4 -= b5 + k8
    b5 -= k0 + t1
    tmp = b3 xor b2
    b3 = (tmp shr 36) or (tmp shl (64 - 36))
    b2 -= b3 + k6
    b3 -= k7
    tmp = b1 xor b0
    b1 = (tmp shr 46) or (tmp shl (64 - 46))
    b0 -= b1 + k4
    b1 -= k5
    tmp = b3 xor b4
    b3 = (tmp shr 22) or (tmp shl (64 - 22))
    b4 -= b3
    tmp = b5 xor b2
    b5 = (tmp shr 56) or (tmp shl (64 - 56))
    b2 -= b5
    tmp = b7 xor b0
    b7 = (tmp shr 35) or (tmp shl (64 - 35))
    b0 -= b7
    tmp = b1 xor b6
    b1 = (tmp shr 8) or (tmp shl (64 - 8))
    b6 -= b1
    tmp = b7 xor b2
    b7 = (tmp shr 43) or (tmp shl (64 - 43))
    b2 -= b7
    tmp = b5 xor b0
    b5 = (tmp shr 39) or (tmp shl (64 - 39))
    b0 -= b5
    tmp = b3 xor b6
    b3 = (tmp shr 29) or (tmp shl (64 - 29))
    b6 -= b3
    tmp = b1 xor b4
    b1 = (tmp shr 25) or (tmp shl (64 - 25))
    b4 -= b1
    tmp = b3 xor b0
    b3 = (tmp shr 17) or (tmp shl (64 - 17))
    b0 -= b3
    tmp = b5 xor b6
    b5 = (tmp shr 10) or (tmp shl (64 - 10))
    b6 -= b5
    tmp = b7 xor b4
    b7 = (tmp shr 50) or (tmp shl (64 - 50))
    b4 -= b7
    tmp = b1 xor b2
    b1 = (tmp shr 13) or (tmp shl (64 - 13))
    b2 -= b1
    tmp = b7 xor b6
    b7 = (tmp shr 24) or (tmp shl (64 - 24))
    b6 -= b7 + k0 + t1
    b7 -= k1 + 3
    tmp = b5 xor b4
    b5 = (tmp shr 34) or (tmp shl (64 - 34))
    b4 -= b5 + k7
    b5 -= k8 + t0
    tmp = b3 xor b2
    b3 = (tmp shr 30) or (tmp shl (64 - 30))
    b2 -= b3 + k5
    b3 -= k6
    tmp = b1 xor b0
    b1 = (tmp shr 39) or (tmp shl (64 - 39))
    b0 -= b1 + k3
    b1 -= k4
    tmp = b3 xor b4
    b3 = (tmp shr 56) or (tmp shl (64 - 56))
    b4 -= b3
    tmp = b5 xor b2
    b5 = (tmp shr 54) or (tmp shl (64 - 54))
    b2 -= b5
    tmp = b7 xor b0
    b7 = (tmp shr 9) or (tmp shl (64 - 9))
    b0 -= b7
    tmp = b1 xor b6
    b1 = (tmp shr 44) or (tmp shl (64 - 44))
    b6 -= b1
    tmp = b7 xor b2
    b7 = (tmp shr 39) or (tmp shl (64 - 39))
    b2 -= b7
    tmp = b5 xor b0
    b5 = (tmp shr 36) or (tmp shl (64 - 36))
    b0 -= b5
    tmp = b3 xor b6
    b3 = (tmp shr 49) or (tmp shl (64 - 49))
    b6 -= b3
    tmp = b1 xor b4
    b1 = (tmp shr 17) or (tmp shl (64 - 17))
    b4 -= b1
    tmp = b3 xor b0
    b3 = (tmp shr 42) or (tmp shl (64 - 42))
    b0 -= b3
    tmp = b5 xor b6
    b5 = (tmp shr 14) or (tmp shl (64 - 14))
    b6 -= b5
    tmp = b7 xor b4
    b7 = (tmp shr 27) or (tmp shl (64 - 27))
    b4 -= b7
    tmp = b1 xor b2
    b1 = (tmp shr 33) or (tmp shl (64 - 33))
    b2 -= b1
    tmp = b7 xor b6
    b7 = (tmp shr 37) or (tmp shl (64 - 37))
    b6 -= b7 + k8 + t0
    b7 -= k0 + 2
    tmp = b5 xor b4
    b5 = (tmp shr 19) or (tmp shl (64 - 19))
    b4 -= b5 + k6
    b5 -= k7 + t2
    tmp = b3 xor b2
    b3 = (tmp shr 36) or (tmp shl (64 - 36))
    b2 -= b3 + k4
    b3 -= k5
    tmp = b1 xor b0
    b1 = (tmp shr 46) or (tmp shl (64 - 46))
    b0 -= b1 + k2
    b1 -= k3
    tmp = b3 xor b4
    b3 = (tmp shr 22) or (tmp shl (64 - 22))
    b4 -= b3
    tmp = b5 xor b2
    b5 = (tmp shr 56) or (tmp shl (64 - 56))
    b2 -= b5
    tmp = b7 xor b0
    b7 = (tmp shr 35) or (tmp shl (64 - 35))
    b0 -= b7
    tmp = b1 xor b6
    b1 = (tmp shr 8) or (tmp shl (64 - 8))
    b6 -= b1
    tmp = b7 xor b2
    b7 = (tmp shr 43) or (tmp shl (64 - 43))
    b2 -= b7
    tmp = b5 xor b0
    b5 = (tmp shr 39) or (tmp shl (64 - 39))
    b0 -= b5
    tmp = b3 xor b6
    b3 = (tmp shr 29) or (tmp shl (64 - 29))
    b6 -= b3
    tmp = b1 xor b4
    b1 = (tmp shr 25) or (tmp shl (64 - 25))
    b4 -= b1
    tmp = b3 xor b0
    b3 = (tmp shr 17) or (tmp shl (64 - 17))
    b0 -= b3
    tmp = b5 xor b6
    b5 = (tmp shr 10) or (tmp shl (64 - 10))
    b6 -= b5
    tmp = b7 xor b4
    b7 = (tmp shr 50) or (tmp shl (64 - 50))
    b4 -= b7
    tmp = b1 xor b2
    b1 = (tmp shr 13) or (tmp shl (64 - 13))
    b2 -= b1
    tmp = b7 xor b6
    b7 = (tmp shr 24) or (tmp shl (64 - 24))
    b6 -= b7 + k7 + t2
    b7 -= k8 + 1
    tmp = b5 xor b4
    b5 = (tmp shr 34) or (tmp shl (64 - 34))
    b4 -= b5 + k5
    b5 -= k6 + t1
    tmp = b3 xor b2
    b3 = (tmp shr 30) or (tmp shl (64 - 30))
    b2 -= b3 + k3
    b3 -= k4
    tmp = b1 xor b0
    b1 = (tmp shr 39) or (tmp shl (64 - 39))
    b0 -= b1 + k1
    b1 -= k2
    tmp = b3 xor b4
    b3 = (tmp shr 56) or (tmp shl (64 - 56))
    b4 -= b3
    tmp = b5 xor b2
    b5 = (tmp shr 54) or (tmp shl (64 - 54))
    b2 -= b5
    tmp = b7 xor b0
    b7 = (tmp shr 9) or (tmp shl (64 - 9))
    b0 -= b7
    tmp = b1 xor b6
    b1 = (tmp shr 44) or (tmp shl (64 - 44))
    b6 -= b1
    tmp = b7 xor b2
    b7 = (tmp shr 39) or (tmp shl (64 - 39))
    b2 -= b7
    tmp = b5 xor b0
    b5 = (tmp shr 36) or (tmp shl (64 - 36))
    b0 -= b5
    tmp = b3 xor b6
    b3 = (tmp shr 49) or (tmp shl (64 - 49))
    b6 -= b3
    tmp = b1 xor b4
    b1 = (tmp shr 17) or (tmp shl (64 - 17))
    b4 -= b1
    tmp = b3 xor b0
    b3 = (tmp shr 42) or (tmp shl (64 - 42))
    b0 -= b3
    tmp = b5 xor b6
    b5 = (tmp shr 14) or (tmp shl (64 - 14))
    b6 -= b5
    tmp = b7 xor b4
    b7 = (tmp shr 27) or (tmp shl (64 - 27))
    b4 -= b7
    tmp = b1 xor b2
    b1 = (tmp shr 33) or (tmp shl (64 - 33))
    b2 -= b1
    tmp = b7 xor b6
    b7 = (tmp shr 37) or (tmp shl (64 - 37))
    b6 -= b7 + k6 + t1
    b7 -= k7
    tmp = b5 xor b4
    b5 = (tmp shr 19) or (tmp shl (64 - 19))
    b4 -= b5 + k4
    b5 -= k5 + t0
    tmp = b3 xor b2
    b3 = (tmp shr 36) or (tmp shl (64 - 36))
    b2 -= b3 + k2
    b3 -= k3
    tmp = b1 xor b0
    b1 = (tmp shr 46) or (tmp shl (64 - 46))
    b0 -= b1 + k0
    b1 -= k1

  output[0] = b0
  output[1] = b1
  output[2] = b2
  output[3] = b3
  output[4] = b4
  output[5] = b5
  output[6] = b6
  output[7] = b7

proc newThreefish512*(key: openarray[byte], tweak: openarray[uint64]): Threefish512 =
  new(result)

  # initialize tweak
  setTweak(tweak, result.expandedTweak)

  result.expandedKey[ExpandedKeySize-1] = KeyScheduleConst

  # convert key bytes to required uint64 array
  if key.len > 0:
    var tmpkey: array[ExpandedKeySize, uint64]
    for i in 0..<ExpandedKeySize-1:
      tmpkey[i] = uint64le(key, i*8)
    setKey(tmpkey, result.expandedKey)

  result.encryptImpl = encrypt
  result.decryptImpl = decrypt
  result.getTempDataImpl = getTempData
  result.setTweakImpl = threefish512.setTweak
  result.setKeyImpl = setKey
  result.stateSize = 512

proc newThreefish512*(key, tweak: openarray[uint64]): Threefish512 =
  new(result)

  # initialize tweak
  setTweak(tweak, result.expandedKey)

  result.expandedKey[ExpandedKeySize-1] = KeyScheduleConst

  setKey(key, result.expandedKey)

  result.encryptImpl = encrypt
  result.decryptImpl = decrypt
  result.getTempDataImpl = getTempData
  result.setTweakImpl = threefish512.setTweak
  result.setKeyImpl = setKey
  result.stateSize = 512
